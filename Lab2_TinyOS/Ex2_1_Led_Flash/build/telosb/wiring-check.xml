<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="8:Led_Flash_App.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x40702500"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x406d29e0"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x406d29e0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x406fbde8"/></to>
    </wire>
    <wire loc="9:Led_Flash_App.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x406eb940"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40949010"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40949010"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x4095d190"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="10:Led_Flash_App.nc">
      <from><interface-ref name="Timer1" scoped="" ref="0x406e1d10"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40a47dc8"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40a47dc8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x4095d190"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="11:Led_Flash_App.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x406f8010"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x406e38d0"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x406e38d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x4080c010"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x406fd610"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4095ba08"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x4070c1d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x404599d8"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x404599d8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x406becd0"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4070c798"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406fde40"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x406fde40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406fc828"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4070cba0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x406fd610"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x406fcc38"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x4070d960"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x4070d960"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4071c1c0"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4070b030"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40708de0"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x4070b410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40823a38"/></to>
    </wire>
    <wire loc="46:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4071c1c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40720478"/></to>
    </wire>
    <wire loc="47:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x40717868"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x40720848"/></to>
    </wire>
    <wire loc="48:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x406de370"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x4071f2f8"/></to>
    </wire>
    <wire loc="113:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x40745548"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407af870"/></to>
    </wire>
    <wire loc="126:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x4075c2a8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407bf700"/></to>
    </wire>
    <wire loc="108:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x4074e358"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407b2b08"/></to>
    </wire>
    <wire loc="149:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x40766788"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407c5430"/></to>
    </wire>
    <wire loc="107:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x40751518"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407b2430"/></to>
    </wire>
    <wire loc="148:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x40756bf8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407c6c78"/></to>
    </wire>
    <wire loc="170:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x40764278"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407e1010"/></to>
    </wire>
    <wire loc="154:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x407591c8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407d6120"/></to>
    </wire>
    <wire loc="99:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x40754d58"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x4078fa10"/></to>
    </wire>
    <wire loc="135:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x407675f8"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407b96e8"/></to>
    </wire>
    <wire loc="134:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x40757bf8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407b9010"/></to>
    </wire>
    <wire loc="133:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x4075ce18"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407ba588"/></to>
    </wire>
    <wire loc="115:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x4074ebf8"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407c2a28"/></to>
    </wire>
    <wire loc="156:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x40765090"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407d4270"/></to>
    </wire>
    <wire loc="140:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x4075ba58"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407ca430"/></to>
    </wire>
    <wire loc="114:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x40751cd8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407c2350"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x4074b070"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40762e58"/></to>
    </wire>
    <wire loc="155:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x40755438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407d6b78"/></to>
    </wire>
    <wire loc="106:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x4074a9a8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407b38f8"/></to>
    </wire>
    <wire loc="161:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x40759d38"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407d1010"/></to>
    </wire>
    <wire loc="101:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x4075da58"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407b6be8"/></to>
    </wire>
    <wire loc="142:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x40767e98"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407c9570"/></to>
    </wire>
    <wire loc="100:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x4074fca8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407b6510"/></to>
    </wire>
    <wire loc="141:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x40756438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407cae88"/></to>
    </wire>
    <wire loc="163:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x40765930"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407d0190"/></to>
    </wire>
    <wire loc="147:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x4075a628"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407c6220"/></to>
    </wire>
    <wire loc="120:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="162:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x40755bf8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407d1a68"/></to>
    </wire>
    <wire loc="128:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x40768cf8"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407be868"/></to>
    </wire>
    <wire loc="169:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x40768438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407cd8d0"/></to>
    </wire>
    <wire loc="127:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x40757438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407be190"/></to>
    </wire>
    <wire loc="168:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x407588c8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407cee68"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x40761e90"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40761b28"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x40780200"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x407df980"/></to>
    </wire>
    <wire loc="96:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x40780558"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x407dfe08"/></to>
    </wire>
    <wire loc="102:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407b5430"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40762e58"/></to>
    </wire>
    <wire loc="103:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407b4080"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40761b28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407b1350"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40762e58"/></to>
    </wire>
    <wire loc="110:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407b0010"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40761b28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407c1270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40762e58"/></to>
    </wire>
    <wire loc="117:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407c1e88"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40761b28"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x4077d910"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x4077dc68"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x407db2c0"/></to>
    </wire>
    <wire loc="123:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x40790010"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x407db748"/></to>
    </wire>
    <wire loc="129:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407bd050"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="130:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407bdc68"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407b9ea0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="137:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407ccb00"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407c9d28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="144:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407c8970"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407c5be8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="151:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407c4890"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407d4a28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="158:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407d36d0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407d0948"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="165:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407cf5f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407e17c8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4077e838"/></to>
    </wire>
    <wire loc="172:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407e0430"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x4077d5a8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x4045a178"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x406bd590"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x406caa40"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x4045d568"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40823a38"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4080fc08"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x40808e10"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x4080ec28"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x4080ec28"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x409431f0"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x4080b820"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x40824680"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x40824680"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40952990"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x4080a2e0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x408230b0"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x408230b0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x4094f1a8"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x40943b68"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x40849bc8"/></to>
    </wire>
    <wire loc="486:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x40849bc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408e45c8"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x40951350"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x40848d88"/></to>
    </wire>
    <wire loc="487:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x40848d88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408fcd68"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x4094fb20"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x4085d010"/></to>
    </wire>
    <wire loc="488:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x4085d010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408f95c8"/></to>
    </wire>
    <wire loc="442:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x4082b368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408a45c8"/></to>
    </wire>
    <wire loc="455:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x408364c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ba5c8"/></to>
    </wire>
    <wire loc="531:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x40868668"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408b3d68"/></to>
    </wire>
    <wire loc="551:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x4086c3d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ff5c8"/></to>
    </wire>
    <wire loc="532:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x40867840"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c85c8"/></to>
    </wire>
    <wire loc="460:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x40834848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408b55c8"/></to>
    </wire>
    <wire loc="473:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x4083fae8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408cb5c8"/></to>
    </wire>
    <wire loc="497:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x40857a08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409045c8"/></to>
    </wire>
    <wire loc="535:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x40864d80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c35c8"/></to>
    </wire>
    <wire loc="545:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x40873ad8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408f45c8"/></to>
    </wire>
    <wire loc="557:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x4087fae0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40916d68"/></to>
    </wire>
    <wire loc="445:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x40828848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4089dd68"/></to>
    </wire>
    <wire loc="536:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x40862010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c0d68"/></to>
    </wire>
    <wire loc="450:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x40826bc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408afd68"/></to>
    </wire>
    <wire loc="463:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x40831d88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c6d68"/></to>
    </wire>
    <wire loc="476:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x40851010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ddd68"/></to>
    </wire>
    <wire loc="489:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x4085c178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408f7d68"/></to>
    </wire>
    <wire loc="500:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x40853010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40916d68"/></to>
    </wire>
    <wire loc="440:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x4082d010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408915c8"/></to>
    </wire>
    <wire loc="453:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x40838178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408a76f8"/></to>
    </wire>
    <wire loc="466:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x40843368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408d55c8"/></to>
    </wire>
    <wire loc="530:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x408694c0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408b3d68"/></to>
    </wire>
    <wire loc="548:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x4086f010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40907d68"/></to>
    </wire>
    <wire loc="555:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x40881918"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40916d68"/></to>
    </wire>
    <wire loc="541:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x4085e5a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408e7d68"/></to>
    </wire>
    <wire loc="471:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x40841688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408d06f8"/></to>
    </wire>
    <wire loc="484:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x4084b848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408e95c8"/></to>
    </wire>
    <wire loc="495:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x40859688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409095c8"/></to>
    </wire>
    <wire loc="549:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x4086e168"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409045c8"/></to>
    </wire>
    <wire loc="538:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x40861168"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ef5c8"/></to>
    </wire>
    <wire loc="443:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x4082a4c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408a2d68"/></to>
    </wire>
    <wire loc="456:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x40835688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408b8d68"/></to>
    </wire>
    <wire loc="493:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x4085b368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408f45c8"/></to>
    </wire>
    <wire loc="461:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x40833a08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408b3d68"/></to>
    </wire>
    <wire loc="474:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x4083eca8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408e2d68"/></to>
    </wire>
    <wire loc="498:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x40856bc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40902d68"/></to>
    </wire>
    <wire loc="540:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x4085f3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408e95c8"/></to>
    </wire>
    <wire loc="438:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x4082ece8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4087b5d8"/></to>
    </wire>
    <wire loc="451:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x4083bd88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ac5c8"/></to>
    </wire>
    <wire loc="464:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x40845010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c35c8"/></to>
    </wire>
    <wire loc="477:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x40850178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408da5c8"/></to>
    </wire>
    <wire loc="542:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x40875760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408d55c8"/></to>
    </wire>
    <wire loc="546:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x40872c98"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408f2d68"/></to>
    </wire>
    <wire loc="552:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x4086b598"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40916d68"/></to>
    </wire>
    <wire loc="482:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x4084e4c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ef5c8"/></to>
    </wire>
    <wire loc="543:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x40874920"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408d3d68"/></to>
    </wire>
    <wire loc="441:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x4082c178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4088fd68"/></to>
    </wire>
    <wire loc="454:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x40837368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408bddf8"/></to>
    </wire>
    <wire loc="467:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x408424c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408d3d68"/></to>
    </wire>
    <wire loc="539:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x40860288"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408edd68"/></to>
    </wire>
    <wire loc="550:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x4086d280"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40902d68"/></to>
    </wire>
    <wire loc="472:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x40840928"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408cedf8"/></to>
    </wire>
    <wire loc="485:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x4084aa08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408e7d68"/></to>
    </wire>
    <wire loc="496:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x40858848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40907d68"/></to>
    </wire>
    <wire loc="444:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x40829688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4089f5c8"/></to>
    </wire>
    <wire loc="494:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x4085a4c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408f2d68"/></to>
    </wire>
    <wire loc="449:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x40827a08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408b15c8"/></to>
    </wire>
    <wire loc="462:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x40832bc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c85c8"/></to>
    </wire>
    <wire loc="475:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x4083de68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408df5c8"/></to>
    </wire>
    <wire loc="499:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x40855d88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ff5c8"/></to>
    </wire>
    <wire loc="439:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x4081ee68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40894d68"/></to>
    </wire>
    <wire loc="452:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x40839010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408aad68"/></to>
    </wire>
    <wire loc="465:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x40844178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c0d68"/></to>
    </wire>
    <wire loc="478:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x4084f368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408d8d68"/></to>
    </wire>
    <wire loc="534:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x40865ba8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c6d68"/></to>
    </wire>
    <wire loc="547:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x40871e58"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x409095c8"/></to>
    </wire>
    <wire loc="533:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x40866a00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408c6d68"/></to>
    </wire>
    <wire loc="483:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x4084c688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408edd68"/></to>
    </wire>
    <wire loc="554:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x4086a758"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408ff5c8"/></to>
    </wire>
    <wire loc="558:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x4087eca8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408f7d68"/></to>
    </wire>
    <wire loc="529:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x40852168"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408b55c8"/></to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x4095d190"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40957200"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40957200"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40a05210"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4095ba08"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4096f3c0"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x4096d310"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x40a2dbc8"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4096f3c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40ccecf0"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x40a385a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409e40a0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40a0a398"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x4096f818"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x4096f818"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ccab88"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40a32588"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x409b6938"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x409b6938"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x409b4980"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40ccecf0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40ce7540"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x40cc7870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ccd180"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40ccd180"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ce79b8"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40cc8630"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x409b6938"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40ce5340"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x40cc2970"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40cc2970"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40ce4010"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x40cea5d0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40cea5d0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40ce4a48"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x40ce9030"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40ce9030"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x4075c2a8"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x40757438"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x4075ba58"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x40756438"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></to>
    </wire>
    <wire loc="71:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x4075a628"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x40756bf8"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x407591c8"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x40755438"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></to>
    </wire>
    <wire loc="79:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x40759d38"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x40755bf8"/></to>
    </wire>
    <wire loc="82:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></to>
    </wire>
    <wire loc="83:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x407588c8"/></to>
    </wire>
    <wire loc="84:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x40768438"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x409c2bd0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x409b3440"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x409b3440"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x409a9e10"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x409b0f08"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x40a08d08"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4045a178"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x40a35798"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4045a178"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="Led_Flash" loc="1:Led_Flash.nc">
      <module/>
    </component>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="45:../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="40:../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Led_Flash_App.Timer0" loc="44(Led_Flash_App.Timer0):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Led_Flash_App.Timer1" loc="44(Led_Flash_App.Timer1):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x40763b88" loc="40:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x40763dc0" loc="41:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x40760030" loc="42:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x40760248" loc="43:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x40760460" loc="44:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x40760670" loc="45:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x40760898" loc="46:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x40760ac0" loc="47:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x40760d30" loc="48:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x4078d108" loc="40:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x4078d368" loc="41:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x4087cce0" loc="40:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x4087cf10" loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x40879160" loc="42:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x40879390" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x40879590" loc="44:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x40981428" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x40981428"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x409af010" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x409af010"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x409c1090" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x409c1090"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x409c14f0" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x409c14f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x409c1758" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x409c1758"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x409c1bc8" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x409c1bc8"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x409c1e30" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x409c02e0" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x409c02e0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x4099fb00" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x4099fb00"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x409ca010" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x409ca010"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x409ca278" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x409ca278"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x409ca6e8" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x409ca6e8"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x409ca950" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x409e6d50" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x409e6d50"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40a043a8" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40a043a8"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x40a04588" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40a34b28" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40a34b28"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Timer0" ref="0x406eb940" loc="2:Led_Flash.nc">
      <component-ref qname="Led_Flash"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer0" scoped="" ref="0x406eb940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x406e14c8"/>
        <function-ref name="fired" scoped="" ref="0x406e2768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x406e2e70"/>
        <function-ref name="isOneShot" scoped="" ref="0x406e2c18"/>
        <function-ref name="getdt" scoped="" ref="0x406e1978"/>
        <function-ref name="gett0" scoped="" ref="0x406e1720"/>
        <function-ref name="isRunning" scoped="" ref="0x406e29c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x406e2010"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x406e11a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x406e2290"/>
        <function-ref name="stop" scoped="" ref="0x406e2510"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x40702500" loc="5:Led_Flash.nc">
      <component-ref qname="Led_Flash"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x40702500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x407026d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer1" ref="0x406e1d10" loc="3:Led_Flash.nc">
      <component-ref qname="Led_Flash"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer1" scoped="" ref="0x406e1d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x406fa8a8"/>
        <function-ref name="fired" scoped="" ref="0x406e9aa8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x406fa268"/>
        <function-ref name="isOneShot" scoped="" ref="0x406fa010"/>
        <function-ref name="getdt" scoped="" ref="0x406fad58"/>
        <function-ref name="gett0" scoped="" ref="0x406fab00"/>
        <function-ref name="isRunning" scoped="" ref="0x406e9d00"/>
        <function-ref name="startPeriodic" scoped="" ref="0x406e9350"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x406fa588"/>
        <function-ref name="startOneShot" scoped="" ref="0x406e95d0"/>
        <function-ref name="stop" scoped="" ref="0x406e9850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x406f8010" loc="4:Led_Flash.nc">
      <component-ref qname="Led_Flash"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x406f8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x406f81e8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x406f82c8"/>
        <function-ref name="led1On" scoped="" ref="0x406f83a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x406f8488"/>
        <function-ref name="led2Toggle" scoped="" ref="0x406f8568"/>
        <function-ref name="get" scoped="" ref="0x406f8648"/>
        <function-ref name="led1Off" scoped="" ref="0x406f8728"/>
        <function-ref name="led2Off" scoped="" ref="0x406f8aa8"/>
        <function-ref name="set" scoped="" ref="0x406f8808"/>
        <function-ref name="led0On" scoped="" ref="0x406f88e8"/>
        <function-ref name="led2On" scoped="" ref="0x406f89c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x406fd610" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x406fd610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406fd7e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x406d29e0" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x406d29e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x406d2bb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406fde40" loc="42:../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x406fde40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406fc050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x4070b030" loc="6:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x4070b030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4070b208"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406fc828" loc="4:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x406fc828"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406fca00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x406fcc38" loc="5:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x406fcc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406fce10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x4070b410" loc="7:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x4070b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4070b5e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40708de0" loc="2:../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40708de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40707010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x4070d960" loc="39:../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x4070d960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4070db38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x40717868" loc="40:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x40717868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x4071b0f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x40717b20"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x40717c00"/>
        <function-ref name="initTimerA" scoped="" ref="0x40717ce0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x40717a40"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x40717dc0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x40717ea0"/>
        <function-ref name="initClocks" scoped="" ref="0x4071b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4071c1c0" loc="39:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4071c1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4071c398"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x40720848" loc="46:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x40720848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x4071f0f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x40720b00"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x40720be0"/>
        <function-ref name="initTimerA" scoped="" ref="0x40720cc0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x40720a20"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x40720da0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x40720e80"/>
        <function-ref name="initClocks" scoped="" ref="0x4071f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x4071f2f8" loc="47:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x4071f2f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4071f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40720478" loc="45:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40720478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40720650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x40745548" loc="42:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x40745548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40745720"/>
        <function-ref name="getControl" scoped="" ref="0x40745800"/>
        <function-ref name="enableEvents" scoped="" ref="0x407458e0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407459c0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40745aa0"/>
        <function-ref name="disableEvents" scoped="" ref="0x40745b80"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40745c60"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40745d40"/>
        <function-ref name="setControl" scoped="" ref="0x40745e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x4075c2a8" loc="51:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x4075c2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4075c480"/>
        <function-ref name="getControl" scoped="" ref="0x4075c560"/>
        <function-ref name="enableEvents" scoped="" ref="0x4075c640"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4075c720"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4075c800"/>
        <function-ref name="disableEvents" scoped="" ref="0x4075c8e0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4075c9c0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4075caa0"/>
        <function-ref name="setControl" scoped="" ref="0x4075cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x4074e358" loc="47:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x4074e358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4074e530"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4074e610"/>
        <function-ref name="captured" scoped="" ref="0x4074e6f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4074e7d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4074e8b0"/>
        <function-ref name="setEdge" scoped="" ref="0x4074e990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x40766788" loc="68:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x40766788"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40766960"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40766a40"/>
        <function-ref name="captured" scoped="" ref="0x40766b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40766c00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40766ce0"/>
        <function-ref name="setEdge" scoped="" ref="0x40766dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x40751518" loc="44:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x40751518"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407516f0"/>
        <function-ref name="setEvent" scoped="" ref="0x407517d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407518b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40751990"/>
        <function-ref name="fired" scoped="" ref="0x40751a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x40756bf8" loc="61:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x40756bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40756dd0"/>
        <function-ref name="setEvent" scoped="" ref="0x40756eb0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40755010"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407550f0"/>
        <function-ref name="fired" scoped="" ref="0x407551d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x40764278" loc="71:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x40764278"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40764450"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40764530"/>
        <function-ref name="captured" scoped="" ref="0x40764610"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407646f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407647d0"/>
        <function-ref name="setEdge" scoped="" ref="0x407648b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x407591c8" loc="55:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x407591c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407593a0"/>
        <function-ref name="getControl" scoped="" ref="0x40759480"/>
        <function-ref name="enableEvents" scoped="" ref="0x40759560"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40759640"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40759720"/>
        <function-ref name="disableEvents" scoped="" ref="0x40759800"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407598e0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407599c0"/>
        <function-ref name="setControl" scoped="" ref="0x40759aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x40754d58" loc="40:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x40754d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4074a010"/>
        <function-ref name="getControl" scoped="" ref="0x4074a0f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x4074a1d0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4074a2b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4074a390"/>
        <function-ref name="disableEvents" scoped="" ref="0x4074a470"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4074a550"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4074a630"/>
        <function-ref name="setControl" scoped="" ref="0x4074a710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x407675f8" loc="66:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x407675f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407677d0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407678b0"/>
        <function-ref name="captured" scoped="" ref="0x40767990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40767a70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40767b50"/>
        <function-ref name="setEdge" scoped="" ref="0x40767c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x40757bf8" loc="59:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x40757bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40757dd0"/>
        <function-ref name="setEvent" scoped="" ref="0x40757eb0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40756010"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407560f0"/>
        <function-ref name="fired" scoped="" ref="0x407561d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x4075ce18" loc="52:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x4075ce18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4075b0c0"/>
        <function-ref name="getControl" scoped="" ref="0x4075b1a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x4075b280"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4075b360"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4075b440"/>
        <function-ref name="disableEvents" scoped="" ref="0x4075b520"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4075b600"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4075b6e0"/>
        <function-ref name="setControl" scoped="" ref="0x4075b7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x4074ebf8" loc="48:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x4074ebf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4074edd0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4074eeb0"/>
        <function-ref name="captured" scoped="" ref="0x4074d010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4074d0f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4074d1d0"/>
        <function-ref name="setEdge" scoped="" ref="0x4074d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x40765090" loc="69:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x40765090"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40765268"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40765348"/>
        <function-ref name="captured" scoped="" ref="0x40765428"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40765508"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407655e8"/>
        <function-ref name="setEdge" scoped="" ref="0x407656c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x4075ba58" loc="53:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x4075ba58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4075bc30"/>
        <function-ref name="getControl" scoped="" ref="0x4075bd10"/>
        <function-ref name="enableEvents" scoped="" ref="0x4075bdf0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4075bed0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4075a010"/>
        <function-ref name="disableEvents" scoped="" ref="0x4075a0f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4075a1d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4075a2b0"/>
        <function-ref name="setControl" scoped="" ref="0x4075a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x40751cd8" loc="45:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x40751cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40751eb0"/>
        <function-ref name="setEvent" scoped="" ref="0x40750010"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407500f0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407501d0"/>
        <function-ref name="fired" scoped="" ref="0x407502b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x4074b070" loc="39:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x4074b070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4074b248"/>
        <function-ref name="setClockSource" scoped="" ref="0x4074b328"/>
        <function-ref name="enableEvents" scoped="" ref="0x4074b408"/>
        <function-ref name="get" scoped="" ref="0x4074b4e8"/>
        <function-ref name="disableEvents" scoped="" ref="0x4074b5c8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4074b6a8"/>
        <function-ref name="getMode" scoped="" ref="0x4074b788"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4074b868"/>
        <function-ref name="overflow" scoped="" ref="0x4074b948"/>
        <function-ref name="setMode" scoped="" ref="0x4074ba28"/>
        <function-ref name="setInputDivider" scoped="" ref="0x4074bb08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x40755438" loc="62:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x40755438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40755610"/>
        <function-ref name="setEvent" scoped="" ref="0x407556f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407557d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407558b0"/>
        <function-ref name="fired" scoped="" ref="0x40755990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x4074a9a8" loc="41:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x4074a9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4074ab80"/>
        <function-ref name="getControl" scoped="" ref="0x4074ac60"/>
        <function-ref name="enableEvents" scoped="" ref="0x4074ad40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4074ae20"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4074af00"/>
        <function-ref name="disableEvents" scoped="" ref="0x40745010"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407450f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407451d0"/>
        <function-ref name="setControl" scoped="" ref="0x407452b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x40759d38" loc="56:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x40759d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40759f10"/>
        <function-ref name="getControl" scoped="" ref="0x40758010"/>
        <function-ref name="enableEvents" scoped="" ref="0x407580f0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407581d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407582b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x40758390"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40758470"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40758550"/>
        <function-ref name="setControl" scoped="" ref="0x40758630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x4075da58" loc="46:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x4075da58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4075dc30"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4075dd10"/>
        <function-ref name="captured" scoped="" ref="0x4075ddf0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4075ded0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4074e010"/>
        <function-ref name="setEdge" scoped="" ref="0x4074e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x40767e98" loc="67:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x40767e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407660c0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407661a0"/>
        <function-ref name="captured" scoped="" ref="0x40766280"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40766360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40766440"/>
        <function-ref name="setEdge" scoped="" ref="0x40766520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x4074fca8" loc="43:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x4074fca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4074fe80"/>
        <function-ref name="setEvent" scoped="" ref="0x40751010"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407510f0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407511d0"/>
        <function-ref name="fired" scoped="" ref="0x407512b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x40756438" loc="60:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x40756438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40756610"/>
        <function-ref name="setEvent" scoped="" ref="0x407566f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407567d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407568b0"/>
        <function-ref name="fired" scoped="" ref="0x40756990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x40765930" loc="70:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x40765930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40765b08"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40765be8"/>
        <function-ref name="captured" scoped="" ref="0x40765cc8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40765da8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40765e88"/>
        <function-ref name="setEdge" scoped="" ref="0x40764010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x4075a628" loc="54:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x4075a628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4075a800"/>
        <function-ref name="getControl" scoped="" ref="0x4075a8e0"/>
        <function-ref name="enableEvents" scoped="" ref="0x4075a9c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4075aaa0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4075ab80"/>
        <function-ref name="disableEvents" scoped="" ref="0x4075ac60"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4075ad40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4075ae20"/>
        <function-ref name="setControl" scoped="" ref="0x4075af00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x4074d4e0" loc="50:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x4074d4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4074d6b8"/>
        <function-ref name="setClockSource" scoped="" ref="0x4074d798"/>
        <function-ref name="enableEvents" scoped="" ref="0x4074d878"/>
        <function-ref name="get" scoped="" ref="0x4074d958"/>
        <function-ref name="disableEvents" scoped="" ref="0x4074da38"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4074db18"/>
        <function-ref name="getMode" scoped="" ref="0x4074dbf8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4074dcd8"/>
        <function-ref name="overflow" scoped="" ref="0x4074ddb8"/>
        <function-ref name="setMode" scoped="" ref="0x4074de98"/>
        <function-ref name="setInputDivider" scoped="" ref="0x4075c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x40755bf8" loc="63:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x40755bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40755dd0"/>
        <function-ref name="setEvent" scoped="" ref="0x40755eb0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40768010"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407680f0"/>
        <function-ref name="fired" scoped="" ref="0x407681d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x40768cf8" loc="65:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x40768cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40768ed0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40767010"/>
        <function-ref name="captured" scoped="" ref="0x407670f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407671d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407672b0"/>
        <function-ref name="setEdge" scoped="" ref="0x40767390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x40768438" loc="64:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x40768438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40768710"/>
        <function-ref name="setEvent" scoped="" ref="0x407687f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407688d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407689b0"/>
        <function-ref name="fired" scoped="" ref="0x40768a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x40757438" loc="58:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x40757438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40757610"/>
        <function-ref name="setEvent" scoped="" ref="0x407576f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407577d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407578b0"/>
        <function-ref name="fired" scoped="" ref="0x40757990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x407588c8" loc="57:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x407588c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40758aa0"/>
        <function-ref name="getControl" scoped="" ref="0x40758b80"/>
        <function-ref name="enableEvents" scoped="" ref="0x40758c60"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40758d40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40758e20"/>
        <function-ref name="disableEvents" scoped="" ref="0x40758f00"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40757010"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407570f0"/>
        <function-ref name="setControl" scoped="" ref="0x407571d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x40780200" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x40780200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407803d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x40761e90" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x40761e90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40780080"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x40780558" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x40780558"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40780730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x40761b28" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x40761b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40761d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40762e58" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40762e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40761050"/>
        <function-ref name="setClockSource" scoped="" ref="0x40761130"/>
        <function-ref name="enableEvents" scoped="" ref="0x40761210"/>
        <function-ref name="get" scoped="" ref="0x407612f0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407613d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407614b0"/>
        <function-ref name="getMode" scoped="" ref="0x40761590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40761670"/>
        <function-ref name="overflow" scoped="" ref="0x40761750"/>
        <function-ref name="setMode" scoped="" ref="0x40761830"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40761910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x4077dc68" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x4077dc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x4077de40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x4077d910" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x4077d910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x4077dae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x40790010" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x40790010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407901e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x4077d5a8" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x4077d5a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x4077d790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4077e838" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x4077e838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4077ea10"/>
        <function-ref name="setClockSource" scoped="" ref="0x4077eaf0"/>
        <function-ref name="enableEvents" scoped="" ref="0x4077ebd0"/>
        <function-ref name="get" scoped="" ref="0x4077ecb0"/>
        <function-ref name="disableEvents" scoped="" ref="0x4077ed90"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4077ee70"/>
        <function-ref name="getMode" scoped="" ref="0x4077d010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4077d0f0"/>
        <function-ref name="overflow" scoped="" ref="0x4077d1d0"/>
        <function-ref name="setMode" scoped="" ref="0x4077d2b0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x4077d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407b6be8" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407b6be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b6dc0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407b6ea0"/>
        <function-ref name="captured" scoped="" ref="0x407b5010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407b50f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407b51d0"/>
        <function-ref name="setEdge" scoped="" ref="0x407b52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x4078fa10" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x4078fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4078fbe8"/>
        <function-ref name="getControl" scoped="" ref="0x4078fcc8"/>
        <function-ref name="enableEvents" scoped="" ref="0x4078fda8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4078fe88"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407b6010"/>
        <function-ref name="disableEvents" scoped="" ref="0x407b60f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407b61d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407b62b0"/>
        <function-ref name="setControl" scoped="" ref="0x407b6390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407b4080" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407b4080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407b4258"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407b6510" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407b6510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b66e8"/>
        <function-ref name="setEvent" scoped="" ref="0x407b67c8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407b68a8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407b6988"/>
        <function-ref name="fired" scoped="" ref="0x407b6a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407b5430" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407b5430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407b5608"/>
        <function-ref name="setClockSource" scoped="" ref="0x407b56e8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407b57c8"/>
        <function-ref name="get" scoped="" ref="0x407b58a8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407b5988"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407b5a68"/>
        <function-ref name="getMode" scoped="" ref="0x407b5b48"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407b5c28"/>
        <function-ref name="overflow" scoped="" ref="0x407b5d08"/>
        <function-ref name="setMode" scoped="" ref="0x407b5de8"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407b5ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407b2b08" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407b2b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b2ce0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407b2dc0"/>
        <function-ref name="captured" scoped="" ref="0x407b2ea0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407b1010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407b10f0"/>
        <function-ref name="setEdge" scoped="" ref="0x407b11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407b38f8" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407b38f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407b3ad0"/>
        <function-ref name="getControl" scoped="" ref="0x407b3bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407b3c90"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407b3d70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407b3e50"/>
        <function-ref name="disableEvents" scoped="" ref="0x407b2010"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407b20f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407b21d0"/>
        <function-ref name="setControl" scoped="" ref="0x407b22b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407b0010" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407b0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407b01e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407b2430" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407b2430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b2608"/>
        <function-ref name="setEvent" scoped="" ref="0x407b26e8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407b27c8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407b28a8"/>
        <function-ref name="fired" scoped="" ref="0x407b2988"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407b1350" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407b1350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407b1528"/>
        <function-ref name="setClockSource" scoped="" ref="0x407b1608"/>
        <function-ref name="enableEvents" scoped="" ref="0x407b16e8"/>
        <function-ref name="get" scoped="" ref="0x407b17c8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407b18a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407b1988"/>
        <function-ref name="getMode" scoped="" ref="0x407b1a68"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407b1b48"/>
        <function-ref name="overflow" scoped="" ref="0x407b1c28"/>
        <function-ref name="setMode" scoped="" ref="0x407b1d08"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407b1de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407c2a28" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407c2a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407c2c00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407c2ce0"/>
        <function-ref name="captured" scoped="" ref="0x407c2dc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407c2ea0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407c1010"/>
        <function-ref name="setEdge" scoped="" ref="0x407c10f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407af870" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407af870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407afa48"/>
        <function-ref name="getControl" scoped="" ref="0x407afb28"/>
        <function-ref name="enableEvents" scoped="" ref="0x407afc08"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407afce8"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407afdc8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407afea8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407c2010"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407c20f0"/>
        <function-ref name="setControl" scoped="" ref="0x407c21d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407c1e88" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407c1e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407c0070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407c2350" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407c2350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407c2528"/>
        <function-ref name="setEvent" scoped="" ref="0x407c2608"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407c26e8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407c27c8"/>
        <function-ref name="fired" scoped="" ref="0x407c28a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407c1270" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407c1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407c1448"/>
        <function-ref name="setClockSource" scoped="" ref="0x407c1528"/>
        <function-ref name="enableEvents" scoped="" ref="0x407c1608"/>
        <function-ref name="get" scoped="" ref="0x407c16e8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407c17c8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407c18a8"/>
        <function-ref name="getMode" scoped="" ref="0x407c1988"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407c1a68"/>
        <function-ref name="overflow" scoped="" ref="0x407c1b48"/>
        <function-ref name="setMode" scoped="" ref="0x407c1c28"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407c1d08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407be868" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407be868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407bea40"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407beb20"/>
        <function-ref name="captured" scoped="" ref="0x407bec00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407bece0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407bedc0"/>
        <function-ref name="setEdge" scoped="" ref="0x407beea0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407bf700" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407bf700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407bf8d8"/>
        <function-ref name="getControl" scoped="" ref="0x407bf9b8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407bfa98"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407bfb78"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407bfc58"/>
        <function-ref name="disableEvents" scoped="" ref="0x407bfd38"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407bfe18"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407bfef8"/>
        <function-ref name="setControl" scoped="" ref="0x407be010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407bdc68" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407bdc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407bde40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407be190" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407be190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407be368"/>
        <function-ref name="setEvent" scoped="" ref="0x407be448"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407be528"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407be608"/>
        <function-ref name="fired" scoped="" ref="0x407be6e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407bd050" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407bd050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407bd228"/>
        <function-ref name="setClockSource" scoped="" ref="0x407bd308"/>
        <function-ref name="enableEvents" scoped="" ref="0x407bd3e8"/>
        <function-ref name="get" scoped="" ref="0x407bd4c8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407bd5a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407bd688"/>
        <function-ref name="getMode" scoped="" ref="0x407bd768"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407bd848"/>
        <function-ref name="overflow" scoped="" ref="0x407bd928"/>
        <function-ref name="setMode" scoped="" ref="0x407bda08"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407bdae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407b96e8" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407b96e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b98c0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407b99a0"/>
        <function-ref name="captured" scoped="" ref="0x407b9a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407b9b60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407b9c40"/>
        <function-ref name="setEdge" scoped="" ref="0x407b9d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407ba588" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407ba588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407ba760"/>
        <function-ref name="getControl" scoped="" ref="0x407ba840"/>
        <function-ref name="enableEvents" scoped="" ref="0x407ba920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407baa00"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407baae0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407babc0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407baca0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407bad80"/>
        <function-ref name="setControl" scoped="" ref="0x407bae60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407ccb00" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407ccb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407cccd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407b9010" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407b9010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b91e8"/>
        <function-ref name="setEvent" scoped="" ref="0x407b92c8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407b93a8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407b9488"/>
        <function-ref name="fired" scoped="" ref="0x407b9568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407b9ea0" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407b9ea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407cc0c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x407cc1a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407cc280"/>
        <function-ref name="get" scoped="" ref="0x407cc360"/>
        <function-ref name="disableEvents" scoped="" ref="0x407cc440"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407cc520"/>
        <function-ref name="getMode" scoped="" ref="0x407cc600"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407cc6e0"/>
        <function-ref name="overflow" scoped="" ref="0x407cc7c0"/>
        <function-ref name="setMode" scoped="" ref="0x407cc8a0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407cc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407c9570" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407c9570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407c9748"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407c9828"/>
        <function-ref name="captured" scoped="" ref="0x407c9908"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407c99e8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407c9ac8"/>
        <function-ref name="setEdge" scoped="" ref="0x407c9ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407ca430" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407ca430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407ca608"/>
        <function-ref name="getControl" scoped="" ref="0x407ca6e8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407ca7c8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407ca8a8"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407ca988"/>
        <function-ref name="disableEvents" scoped="" ref="0x407caa68"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407cab48"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407cac28"/>
        <function-ref name="setControl" scoped="" ref="0x407cad08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407c8970" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407c8970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407c8b48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407cae88" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407cae88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407c9070"/>
        <function-ref name="setEvent" scoped="" ref="0x407c9150"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407c9230"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407c9310"/>
        <function-ref name="fired" scoped="" ref="0x407c93f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407c9d28" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407c9d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407c9f00"/>
        <function-ref name="setClockSource" scoped="" ref="0x407c8010"/>
        <function-ref name="enableEvents" scoped="" ref="0x407c80f0"/>
        <function-ref name="get" scoped="" ref="0x407c81d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407c82b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407c8390"/>
        <function-ref name="getMode" scoped="" ref="0x407c8470"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407c8550"/>
        <function-ref name="overflow" scoped="" ref="0x407c8630"/>
        <function-ref name="setMode" scoped="" ref="0x407c8710"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407c87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407c5430" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407c5430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407c5608"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407c56e8"/>
        <function-ref name="captured" scoped="" ref="0x407c57c8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407c58a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407c5988"/>
        <function-ref name="setEdge" scoped="" ref="0x407c5a68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407c6220" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407c6220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407c63f8"/>
        <function-ref name="getControl" scoped="" ref="0x407c64d8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407c65b8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407c6698"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407c6778"/>
        <function-ref name="disableEvents" scoped="" ref="0x407c6858"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407c6938"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407c6a18"/>
        <function-ref name="setControl" scoped="" ref="0x407c6af8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407c4890" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407c4890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407c4a68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407c6c78" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407c6c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407c6e50"/>
        <function-ref name="setEvent" scoped="" ref="0x407c5010"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407c50f0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407c51d0"/>
        <function-ref name="fired" scoped="" ref="0x407c52b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407c5be8" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407c5be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407c5dc0"/>
        <function-ref name="setClockSource" scoped="" ref="0x407c5ea0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407c4010"/>
        <function-ref name="get" scoped="" ref="0x407c40f0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407c41d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407c42b0"/>
        <function-ref name="getMode" scoped="" ref="0x407c4390"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407c4470"/>
        <function-ref name="overflow" scoped="" ref="0x407c4550"/>
        <function-ref name="setMode" scoped="" ref="0x407c4630"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407c4710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407d4270" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407d4270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407d4448"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407d4528"/>
        <function-ref name="captured" scoped="" ref="0x407d4608"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407d46e8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407d47c8"/>
        <function-ref name="setEdge" scoped="" ref="0x407d48a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407d6120" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407d6120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407d62f8"/>
        <function-ref name="getControl" scoped="" ref="0x407d63d8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407d64b8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407d6598"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407d6678"/>
        <function-ref name="disableEvents" scoped="" ref="0x407d6758"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407d6838"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407d6918"/>
        <function-ref name="setControl" scoped="" ref="0x407d69f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407d36d0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407d36d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407d38a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407d6b78" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407d6b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407d6d50"/>
        <function-ref name="setEvent" scoped="" ref="0x407d6e30"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407d6f10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407d4010"/>
        <function-ref name="fired" scoped="" ref="0x407d40f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407d4a28" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407d4a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407d4c00"/>
        <function-ref name="setClockSource" scoped="" ref="0x407d4ce0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407d4dc0"/>
        <function-ref name="get" scoped="" ref="0x407d4ea0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407d3010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407d30f0"/>
        <function-ref name="getMode" scoped="" ref="0x407d31d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407d32b0"/>
        <function-ref name="overflow" scoped="" ref="0x407d3390"/>
        <function-ref name="setMode" scoped="" ref="0x407d3470"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407d3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407d0190" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407d0190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407d0368"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407d0448"/>
        <function-ref name="captured" scoped="" ref="0x407d0528"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407d0608"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407d06e8"/>
        <function-ref name="setEdge" scoped="" ref="0x407d07c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407d1010" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407d1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407d11e8"/>
        <function-ref name="getControl" scoped="" ref="0x407d12c8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407d13a8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407d1488"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407d1568"/>
        <function-ref name="disableEvents" scoped="" ref="0x407d1648"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407d1728"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407d1808"/>
        <function-ref name="setControl" scoped="" ref="0x407d18e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407cf5f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407cf5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407cf7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407d1a68" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407d1a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407d1c40"/>
        <function-ref name="setEvent" scoped="" ref="0x407d1d20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407d1e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407d1ee0"/>
        <function-ref name="fired" scoped="" ref="0x407d0010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407d0948" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407d0948"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407d0b20"/>
        <function-ref name="setClockSource" scoped="" ref="0x407d0c00"/>
        <function-ref name="enableEvents" scoped="" ref="0x407d0ce0"/>
        <function-ref name="get" scoped="" ref="0x407d0dc0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407d0ea0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407cf010"/>
        <function-ref name="getMode" scoped="" ref="0x407cf0f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407cf1d0"/>
        <function-ref name="overflow" scoped="" ref="0x407cf2b0"/>
        <function-ref name="setMode" scoped="" ref="0x407cf390"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407cf470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407e1010" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407e1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407e11e8"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407e12c8"/>
        <function-ref name="captured" scoped="" ref="0x407e13a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407e1488"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407e1568"/>
        <function-ref name="setEdge" scoped="" ref="0x407e1648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407cee68" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407cee68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407cd050"/>
        <function-ref name="getControl" scoped="" ref="0x407cd130"/>
        <function-ref name="enableEvents" scoped="" ref="0x407cd210"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407cd2f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407cd3d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407cd4b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407cd590"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407cd670"/>
        <function-ref name="setControl" scoped="" ref="0x407cd750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407e0430" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407e0430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407e0608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407cd8d0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407cd8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407cdaa8"/>
        <function-ref name="setEvent" scoped="" ref="0x407cdb88"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407cdc68"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407cdd48"/>
        <function-ref name="fired" scoped="" ref="0x407cde28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407e17c8" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407e17c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407e19a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x407e1a80"/>
        <function-ref name="enableEvents" scoped="" ref="0x407e1b60"/>
        <function-ref name="get" scoped="" ref="0x407e1c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x407e1d20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407e1e00"/>
        <function-ref name="getMode" scoped="" ref="0x407e1ee0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407e0010"/>
        <function-ref name="overflow" scoped="" ref="0x407e00f0"/>
        <function-ref name="setMode" scoped="" ref="0x407e01d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407e02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x407db748" loc="7:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x407db748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407db920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x407df980" loc="4:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x407df980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407dfb58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x407dfe08" loc="5:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x407dfe08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407db010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x407db2c0" loc="6:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x407db2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407db498"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x406de370" loc="55:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x406de370"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x406de548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x4045d568" loc="51:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x4045d568"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x4045d740"/>
        <function-ref name="irq_postamble" scoped="" ref="0x4045d820"/>
        <function-ref name="sleep" scoped="" ref="0x4045d900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x4063f3e0" loc="52:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x4063f3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x4063f5b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x40804010" loc="39:../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x40804010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x40804808"/>
        <function-ref name="initTimerB" scoped="" ref="0x408042c8"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x408043a8"/>
        <function-ref name="initTimerA" scoped="" ref="0x40804488"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x408041e8"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x40804568"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x40804648"/>
        <function-ref name="initClocks" scoped="" ref="0x40804728"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x4070cba0" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x4070cba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4070cd78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x406fbde8" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x406fbde8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x4070c010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x4070c798" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x4070c798"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4070c970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x4070c1d0" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x4070c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4070c3a8"/>
        <function-ref name="taskLoop" scoped="" ref="0x4070c488"/>
        <function-ref name="runNextTask" scoped="" ref="0x4070c568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x4045a178" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x4045a178"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4045a350"/>
        <function-ref name="runTask" scoped="" ref="0x4045a430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x404599d8" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x404599d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40459bb0"/>
        <function-ref name="taskLoop" scoped="" ref="0x40459c90"/>
        <function-ref name="runNextTask" scoped="" ref="0x40459d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x406bd590" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x406bd590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x406bd768"/>
        <function-ref name="runTask" scoped="" ref="0x406bd848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x406caa40" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x406caa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x406cac18"/>
        <function-ref name="irq_postamble" scoped="" ref="0x406cacf8"/>
        <function-ref name="sleep" scoped="" ref="0x406cadd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x406becd0" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x406becd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406beea8"/>
        <function-ref name="taskLoop" scoped="" ref="0x406bd010"/>
        <function-ref name="runNextTask" scoped="" ref="0x406bd0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x406e38d0" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x406e38d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x406e3aa8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x406e3b88"/>
        <function-ref name="led1On" scoped="" ref="0x406e3c68"/>
        <function-ref name="led1Toggle" scoped="" ref="0x406e3d48"/>
        <function-ref name="led2Toggle" scoped="" ref="0x406e3e28"/>
        <function-ref name="get" scoped="" ref="0x406e3f08"/>
        <function-ref name="led1Off" scoped="" ref="0x4080f010"/>
        <function-ref name="led2Off" scoped="" ref="0x4080f390"/>
        <function-ref name="set" scoped="" ref="0x4080f0f0"/>
        <function-ref name="led0On" scoped="" ref="0x4080f1d0"/>
        <function-ref name="led2On" scoped="" ref="0x4080f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x40808e10" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x40808e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4080b010"/>
        <function-ref name="isInput" scoped="" ref="0x4080b0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4080b1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4080b2b0"/>
        <function-ref name="get" scoped="" ref="0x4080b390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4080b470"/>
        <function-ref name="set" scoped="" ref="0x4080b550"/>
        <function-ref name="clr" scoped="" ref="0x4080b630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4080fc08" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4080fc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4080fde0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x4080b820" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x4080b820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4080b9f8"/>
        <function-ref name="isInput" scoped="" ref="0x4080bad8"/>
        <function-ref name="toggle" scoped="" ref="0x4080bbb8"/>
        <function-ref name="isOutput" scoped="" ref="0x4080bc98"/>
        <function-ref name="get" scoped="" ref="0x4080bd78"/>
        <function-ref name="makeOutput" scoped="" ref="0x4080be58"/>
        <function-ref name="set" scoped="" ref="0x4080a010"/>
        <function-ref name="clr" scoped="" ref="0x4080a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x4080c010" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x4080c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4080c1e8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4080c2c8"/>
        <function-ref name="led1On" scoped="" ref="0x4080c3a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4080c488"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4080c568"/>
        <function-ref name="get" scoped="" ref="0x4080c648"/>
        <function-ref name="led1Off" scoped="" ref="0x4080c728"/>
        <function-ref name="led2Off" scoped="" ref="0x4080caa8"/>
        <function-ref name="set" scoped="" ref="0x4080c808"/>
        <function-ref name="led0On" scoped="" ref="0x4080c8e8"/>
        <function-ref name="led2On" scoped="" ref="0x4080c9c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x4080a2e0" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x4080a2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4080a4b8"/>
        <function-ref name="isInput" scoped="" ref="0x4080a598"/>
        <function-ref name="toggle" scoped="" ref="0x4080a678"/>
        <function-ref name="isOutput" scoped="" ref="0x4080a758"/>
        <function-ref name="get" scoped="" ref="0x4080a838"/>
        <function-ref name="makeOutput" scoped="" ref="0x4080a918"/>
        <function-ref name="set" scoped="" ref="0x4080a9f8"/>
        <function-ref name="clr" scoped="" ref="0x4080aad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x4080ec28" loc="41:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x4080ec28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4080ee00"/>
        <function-ref name="isInput" scoped="" ref="0x4080eee0"/>
        <function-ref name="toggle" scoped="" ref="0x40824010"/>
        <function-ref name="isOutput" scoped="" ref="0x408240f0"/>
        <function-ref name="get" scoped="" ref="0x408241d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408242b0"/>
        <function-ref name="set" scoped="" ref="0x40824390"/>
        <function-ref name="clr" scoped="" ref="0x40824470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x40824680" loc="42:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x40824680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40824858"/>
        <function-ref name="isInput" scoped="" ref="0x40824938"/>
        <function-ref name="toggle" scoped="" ref="0x40824a18"/>
        <function-ref name="isOutput" scoped="" ref="0x40824af8"/>
        <function-ref name="get" scoped="" ref="0x40824bd8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40824cb8"/>
        <function-ref name="set" scoped="" ref="0x40824d98"/>
        <function-ref name="clr" scoped="" ref="0x40824e78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x40823a38" loc="44:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40823a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40823c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x408230b0" loc="43:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x408230b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40823288"/>
        <function-ref name="isInput" scoped="" ref="0x40823368"/>
        <function-ref name="toggle" scoped="" ref="0x40823448"/>
        <function-ref name="isOutput" scoped="" ref="0x40823528"/>
        <function-ref name="get" scoped="" ref="0x40823608"/>
        <function-ref name="makeOutput" scoped="" ref="0x408236e8"/>
        <function-ref name="set" scoped="" ref="0x408237c8"/>
        <function-ref name="clr" scoped="" ref="0x408238a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x4082b368" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x4082b368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4082b540"/>
        <function-ref name="isInput" scoped="" ref="0x4082b620"/>
        <function-ref name="setResistor" scoped="" ref="0x4082b700"/>
        <function-ref name="toggle" scoped="" ref="0x4082b7e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4082b8c0"/>
        <function-ref name="getResistor" scoped="" ref="0x4082b9a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4082ba80"/>
        <function-ref name="get" scoped="" ref="0x4082bb60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4082bc40"/>
        <function-ref name="getRaw" scoped="" ref="0x4082bd20"/>
        <function-ref name="set" scoped="" ref="0x4082be00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4082bee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4082a010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4082a170"/>
        <function-ref name="clr" scoped="" ref="0x4082a250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x408364c8" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x408364c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408366a0"/>
        <function-ref name="isInput" scoped="" ref="0x40836780"/>
        <function-ref name="setResistor" scoped="" ref="0x40836860"/>
        <function-ref name="toggle" scoped="" ref="0x40836940"/>
        <function-ref name="isOutput" scoped="" ref="0x40836a20"/>
        <function-ref name="getResistor" scoped="" ref="0x40836b00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40836be0"/>
        <function-ref name="get" scoped="" ref="0x40836cc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40836da0"/>
        <function-ref name="getRaw" scoped="" ref="0x40836e80"/>
        <function-ref name="set" scoped="" ref="0x40835010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408350f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408351d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40835330"/>
        <function-ref name="clr" scoped="" ref="0x40835410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x40868668" loc="145:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x40868668"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40868840"/>
        <function-ref name="isInput" scoped="" ref="0x40868920"/>
        <function-ref name="setResistor" scoped="" ref="0x40868a00"/>
        <function-ref name="toggle" scoped="" ref="0x40868ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x40868bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x40868ca0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40868d80"/>
        <function-ref name="get" scoped="" ref="0x40868e60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40867010"/>
        <function-ref name="getRaw" scoped="" ref="0x408670f0"/>
        <function-ref name="set" scoped="" ref="0x408671d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408672b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40867390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408674f0"/>
        <function-ref name="clr" scoped="" ref="0x408675d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x4086c3d8" loc="165:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x4086c3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086c5b0"/>
        <function-ref name="isInput" scoped="" ref="0x4086c690"/>
        <function-ref name="setResistor" scoped="" ref="0x4086c770"/>
        <function-ref name="toggle" scoped="" ref="0x4086c850"/>
        <function-ref name="isOutput" scoped="" ref="0x4086c930"/>
        <function-ref name="getResistor" scoped="" ref="0x4086ca10"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086caf0"/>
        <function-ref name="get" scoped="" ref="0x4086cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4086ccb0"/>
        <function-ref name="getRaw" scoped="" ref="0x4086cd90"/>
        <function-ref name="set" scoped="" ref="0x4086ce70"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4086b010"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4086b0f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4086b250"/>
        <function-ref name="clr" scoped="" ref="0x4086b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x40867840" loc="146:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x40867840"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40867a18"/>
        <function-ref name="isInput" scoped="" ref="0x40867af8"/>
        <function-ref name="setResistor" scoped="" ref="0x40867bd8"/>
        <function-ref name="toggle" scoped="" ref="0x40867cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x40867d98"/>
        <function-ref name="getResistor" scoped="" ref="0x40867e78"/>
        <function-ref name="makeOutput" scoped="" ref="0x40866010"/>
        <function-ref name="get" scoped="" ref="0x408660f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408661d0"/>
        <function-ref name="getRaw" scoped="" ref="0x408662b0"/>
        <function-ref name="set" scoped="" ref="0x40866390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40866470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40866550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408666b0"/>
        <function-ref name="clr" scoped="" ref="0x40866790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x40834848" loc="71:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x40834848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40834a20"/>
        <function-ref name="isInput" scoped="" ref="0x40834b00"/>
        <function-ref name="setResistor" scoped="" ref="0x40834be0"/>
        <function-ref name="toggle" scoped="" ref="0x40834cc0"/>
        <function-ref name="isOutput" scoped="" ref="0x40834da0"/>
        <function-ref name="getResistor" scoped="" ref="0x40834e80"/>
        <function-ref name="makeOutput" scoped="" ref="0x40833010"/>
        <function-ref name="get" scoped="" ref="0x408330f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408331d0"/>
        <function-ref name="getRaw" scoped="" ref="0x408332b0"/>
        <function-ref name="set" scoped="" ref="0x40833390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40833470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40833550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408336b0"/>
        <function-ref name="clr" scoped="" ref="0x40833790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x4083fae8" loc="84:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x4083fae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4083fcc0"/>
        <function-ref name="isInput" scoped="" ref="0x4083fda0"/>
        <function-ref name="setResistor" scoped="" ref="0x4083fe80"/>
        <function-ref name="toggle" scoped="" ref="0x4083e010"/>
        <function-ref name="isOutput" scoped="" ref="0x4083e0f0"/>
        <function-ref name="getResistor" scoped="" ref="0x4083e1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4083e2b0"/>
        <function-ref name="get" scoped="" ref="0x4083e390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4083e470"/>
        <function-ref name="getRaw" scoped="" ref="0x4083e550"/>
        <function-ref name="set" scoped="" ref="0x4083e630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4083e710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4083e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4083e950"/>
        <function-ref name="clr" scoped="" ref="0x4083ea30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x40849bc8" loc="97:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x40849bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40849da0"/>
        <function-ref name="isInput" scoped="" ref="0x40849e80"/>
        <function-ref name="setResistor" scoped="" ref="0x40848010"/>
        <function-ref name="toggle" scoped="" ref="0x408480f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408481d0"/>
        <function-ref name="getResistor" scoped="" ref="0x408482b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40848390"/>
        <function-ref name="get" scoped="" ref="0x40848470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40848550"/>
        <function-ref name="getRaw" scoped="" ref="0x40848630"/>
        <function-ref name="set" scoped="" ref="0x40848710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408487f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408488d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40848a30"/>
        <function-ref name="clr" scoped="" ref="0x40848b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x40857a08" loc="108:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x40857a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40857be0"/>
        <function-ref name="isInput" scoped="" ref="0x40857cc0"/>
        <function-ref name="setResistor" scoped="" ref="0x40857da0"/>
        <function-ref name="toggle" scoped="" ref="0x40857e80"/>
        <function-ref name="isOutput" scoped="" ref="0x40856010"/>
        <function-ref name="getResistor" scoped="" ref="0x408560f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408561d0"/>
        <function-ref name="get" scoped="" ref="0x408562b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40856390"/>
        <function-ref name="getRaw" scoped="" ref="0x40856470"/>
        <function-ref name="set" scoped="" ref="0x40856550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40856630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40856710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40856870"/>
        <function-ref name="clr" scoped="" ref="0x40856950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x40864d80" loc="149:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x40864d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40863010"/>
        <function-ref name="isInput" scoped="" ref="0x408630f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408631d0"/>
        <function-ref name="toggle" scoped="" ref="0x408632b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40863390"/>
        <function-ref name="getResistor" scoped="" ref="0x40863470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40863550"/>
        <function-ref name="get" scoped="" ref="0x40863630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40863710"/>
        <function-ref name="getRaw" scoped="" ref="0x408637f0"/>
        <function-ref name="set" scoped="" ref="0x408638d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408639b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40863a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40863bf0"/>
        <function-ref name="clr" scoped="" ref="0x40863cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x40873ad8" loc="159:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x40873ad8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40873cb0"/>
        <function-ref name="isInput" scoped="" ref="0x40873d90"/>
        <function-ref name="setResistor" scoped="" ref="0x40873e70"/>
        <function-ref name="toggle" scoped="" ref="0x40872010"/>
        <function-ref name="isOutput" scoped="" ref="0x408720f0"/>
        <function-ref name="getResistor" scoped="" ref="0x408721d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408722b0"/>
        <function-ref name="get" scoped="" ref="0x40872390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40872470"/>
        <function-ref name="getRaw" scoped="" ref="0x40872550"/>
        <function-ref name="set" scoped="" ref="0x40872630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40872710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408727f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40872950"/>
        <function-ref name="clr" scoped="" ref="0x40872a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x4087fae0" loc="171:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x4087fae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4087fcb8"/>
        <function-ref name="isInput" scoped="" ref="0x4087fd98"/>
        <function-ref name="setResistor" scoped="" ref="0x4087fe78"/>
        <function-ref name="toggle" scoped="" ref="0x4087e010"/>
        <function-ref name="isOutput" scoped="" ref="0x4087e0f0"/>
        <function-ref name="getResistor" scoped="" ref="0x4087e1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4087e2b0"/>
        <function-ref name="get" scoped="" ref="0x4087e390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4087e470"/>
        <function-ref name="getRaw" scoped="" ref="0x4087e550"/>
        <function-ref name="set" scoped="" ref="0x4087e630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4087e710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4087e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4087e950"/>
        <function-ref name="clr" scoped="" ref="0x4087ea30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x40828848" loc="56:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x40828848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40828a20"/>
        <function-ref name="isInput" scoped="" ref="0x40828b00"/>
        <function-ref name="setResistor" scoped="" ref="0x40828be0"/>
        <function-ref name="toggle" scoped="" ref="0x40828cc0"/>
        <function-ref name="isOutput" scoped="" ref="0x40828da0"/>
        <function-ref name="getResistor" scoped="" ref="0x40828e80"/>
        <function-ref name="makeOutput" scoped="" ref="0x40827010"/>
        <function-ref name="get" scoped="" ref="0x408270f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408271d0"/>
        <function-ref name="getRaw" scoped="" ref="0x408272b0"/>
        <function-ref name="set" scoped="" ref="0x40827390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40827470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40827550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408276b0"/>
        <function-ref name="clr" scoped="" ref="0x40827790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x40862010" loc="150:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x40862010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408621e8"/>
        <function-ref name="isInput" scoped="" ref="0x408622c8"/>
        <function-ref name="setResistor" scoped="" ref="0x408623a8"/>
        <function-ref name="toggle" scoped="" ref="0x40862488"/>
        <function-ref name="isOutput" scoped="" ref="0x40862568"/>
        <function-ref name="getResistor" scoped="" ref="0x40862648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40862728"/>
        <function-ref name="get" scoped="" ref="0x40862808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408628e8"/>
        <function-ref name="getRaw" scoped="" ref="0x408629c8"/>
        <function-ref name="set" scoped="" ref="0x40862aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40862b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40862c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40862dc8"/>
        <function-ref name="clr" scoped="" ref="0x40862ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x40826bc8" loc="61:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x40826bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40826da0"/>
        <function-ref name="isInput" scoped="" ref="0x40826e80"/>
        <function-ref name="setResistor" scoped="" ref="0x4083b010"/>
        <function-ref name="toggle" scoped="" ref="0x4083b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4083b1d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4083b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4083b390"/>
        <function-ref name="get" scoped="" ref="0x4083b470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4083b550"/>
        <function-ref name="getRaw" scoped="" ref="0x4083b630"/>
        <function-ref name="set" scoped="" ref="0x4083b710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4083b7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4083b8d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4083ba30"/>
        <function-ref name="clr" scoped="" ref="0x4083bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x40831d88" loc="74:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x40831d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40846010"/>
        <function-ref name="isInput" scoped="" ref="0x408460f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408461d0"/>
        <function-ref name="toggle" scoped="" ref="0x408462b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40846390"/>
        <function-ref name="getResistor" scoped="" ref="0x40846470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40846550"/>
        <function-ref name="get" scoped="" ref="0x40846630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40846710"/>
        <function-ref name="getRaw" scoped="" ref="0x408467f0"/>
        <function-ref name="set" scoped="" ref="0x408468d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408469b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40846a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40846bf0"/>
        <function-ref name="clr" scoped="" ref="0x40846cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x40851010" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x40851010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408511e8"/>
        <function-ref name="isInput" scoped="" ref="0x408512c8"/>
        <function-ref name="setResistor" scoped="" ref="0x408513a8"/>
        <function-ref name="toggle" scoped="" ref="0x40851488"/>
        <function-ref name="isOutput" scoped="" ref="0x40851568"/>
        <function-ref name="getResistor" scoped="" ref="0x40851648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40851728"/>
        <function-ref name="get" scoped="" ref="0x40851808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408518e8"/>
        <function-ref name="getRaw" scoped="" ref="0x408519c8"/>
        <function-ref name="set" scoped="" ref="0x40851aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40851b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40851c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40851dc8"/>
        <function-ref name="clr" scoped="" ref="0x40851ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x4085c178" loc="100:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x4085c178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085c350"/>
        <function-ref name="isInput" scoped="" ref="0x4085c430"/>
        <function-ref name="setResistor" scoped="" ref="0x4085c510"/>
        <function-ref name="toggle" scoped="" ref="0x4085c5f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4085c6d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4085c7b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085c890"/>
        <function-ref name="get" scoped="" ref="0x4085c970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4085ca50"/>
        <function-ref name="getRaw" scoped="" ref="0x4085cb30"/>
        <function-ref name="set" scoped="" ref="0x4085cc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4085ccf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4085cdd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4085b010"/>
        <function-ref name="clr" scoped="" ref="0x4085b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x40853010" loc="111:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x40853010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408531e8"/>
        <function-ref name="isInput" scoped="" ref="0x408532c8"/>
        <function-ref name="setResistor" scoped="" ref="0x408533a8"/>
        <function-ref name="toggle" scoped="" ref="0x40853488"/>
        <function-ref name="isOutput" scoped="" ref="0x40853568"/>
        <function-ref name="getResistor" scoped="" ref="0x40853648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40853728"/>
        <function-ref name="get" scoped="" ref="0x40853808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408538e8"/>
        <function-ref name="getRaw" scoped="" ref="0x408539c8"/>
        <function-ref name="set" scoped="" ref="0x40853aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40853b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40853c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40853dc8"/>
        <function-ref name="clr" scoped="" ref="0x40853ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x4082d010" loc="51:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x4082d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4082d1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4082d2c8"/>
        <function-ref name="setResistor" scoped="" ref="0x4082d3a8"/>
        <function-ref name="toggle" scoped="" ref="0x4082d488"/>
        <function-ref name="isOutput" scoped="" ref="0x4082d568"/>
        <function-ref name="getResistor" scoped="" ref="0x4082d648"/>
        <function-ref name="makeOutput" scoped="" ref="0x4082d728"/>
        <function-ref name="get" scoped="" ref="0x4082d808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4082d8e8"/>
        <function-ref name="getRaw" scoped="" ref="0x4082d9c8"/>
        <function-ref name="set" scoped="" ref="0x4082daa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4082db88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4082dc68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4082ddc8"/>
        <function-ref name="clr" scoped="" ref="0x4082dea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x40838178" loc="64:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x40838178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408383d0"/>
        <function-ref name="isInput" scoped="" ref="0x408384b0"/>
        <function-ref name="setResistor" scoped="" ref="0x40838590"/>
        <function-ref name="toggle" scoped="" ref="0x40838670"/>
        <function-ref name="isOutput" scoped="" ref="0x40838750"/>
        <function-ref name="getResistor" scoped="" ref="0x40838830"/>
        <function-ref name="makeOutput" scoped="" ref="0x40838910"/>
        <function-ref name="get" scoped="" ref="0x408389f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40838ad0"/>
        <function-ref name="getRaw" scoped="" ref="0x40838bb0"/>
        <function-ref name="set" scoped="" ref="0x40838c90"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40838d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40838e50"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40837010"/>
        <function-ref name="clr" scoped="" ref="0x408370f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x40843368" loc="77:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x40843368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40843540"/>
        <function-ref name="isInput" scoped="" ref="0x40843620"/>
        <function-ref name="setResistor" scoped="" ref="0x40843700"/>
        <function-ref name="toggle" scoped="" ref="0x408437e0"/>
        <function-ref name="isOutput" scoped="" ref="0x408438c0"/>
        <function-ref name="getResistor" scoped="" ref="0x408439a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40843a80"/>
        <function-ref name="get" scoped="" ref="0x40843b60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40843c40"/>
        <function-ref name="getRaw" scoped="" ref="0x40843d20"/>
        <function-ref name="set" scoped="" ref="0x40843e00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40843ee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40842010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40842170"/>
        <function-ref name="clr" scoped="" ref="0x40842250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x408694c0" loc="144:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x408694c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40869698"/>
        <function-ref name="isInput" scoped="" ref="0x40869778"/>
        <function-ref name="setResistor" scoped="" ref="0x40869858"/>
        <function-ref name="toggle" scoped="" ref="0x40869938"/>
        <function-ref name="isOutput" scoped="" ref="0x40869a18"/>
        <function-ref name="getResistor" scoped="" ref="0x40869af8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40869bd8"/>
        <function-ref name="get" scoped="" ref="0x40869cb8"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40869d98"/>
        <function-ref name="getRaw" scoped="" ref="0x40869e78"/>
        <function-ref name="set" scoped="" ref="0x40868010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408680f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408681d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40868330"/>
        <function-ref name="clr" scoped="" ref="0x40868410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x4086f010" loc="162:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x4086f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086f1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4086f2c8"/>
        <function-ref name="setResistor" scoped="" ref="0x4086f3a8"/>
        <function-ref name="toggle" scoped="" ref="0x4086f488"/>
        <function-ref name="isOutput" scoped="" ref="0x4086f568"/>
        <function-ref name="getResistor" scoped="" ref="0x4086f648"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086f728"/>
        <function-ref name="get" scoped="" ref="0x4086f808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4086f8e8"/>
        <function-ref name="getRaw" scoped="" ref="0x4086f9c8"/>
        <function-ref name="set" scoped="" ref="0x4086faa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4086fb88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4086fc68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4086fdc8"/>
        <function-ref name="clr" scoped="" ref="0x4086fea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x40881918" loc="169:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x40881918"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40881af0"/>
        <function-ref name="isInput" scoped="" ref="0x40881bd0"/>
        <function-ref name="setResistor" scoped="" ref="0x40881cb0"/>
        <function-ref name="toggle" scoped="" ref="0x40881d90"/>
        <function-ref name="isOutput" scoped="" ref="0x40881e70"/>
        <function-ref name="getResistor" scoped="" ref="0x4087f010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4087f0f0"/>
        <function-ref name="get" scoped="" ref="0x4087f1d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4087f2b0"/>
        <function-ref name="getRaw" scoped="" ref="0x4087f390"/>
        <function-ref name="set" scoped="" ref="0x4087f470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4087f550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4087f630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4087f790"/>
        <function-ref name="clr" scoped="" ref="0x4087f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x4085e5a0" loc="155:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x4085e5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085e778"/>
        <function-ref name="isInput" scoped="" ref="0x4085e858"/>
        <function-ref name="setResistor" scoped="" ref="0x4085e938"/>
        <function-ref name="toggle" scoped="" ref="0x4085ea18"/>
        <function-ref name="isOutput" scoped="" ref="0x4085eaf8"/>
        <function-ref name="getResistor" scoped="" ref="0x4085ebd8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085ecb8"/>
        <function-ref name="get" scoped="" ref="0x4085ed98"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4085ee78"/>
        <function-ref name="getRaw" scoped="" ref="0x40875010"/>
        <function-ref name="set" scoped="" ref="0x408750f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408751d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408752b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40875410"/>
        <function-ref name="clr" scoped="" ref="0x408754f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x40841688" loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x40841688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40841960"/>
        <function-ref name="isInput" scoped="" ref="0x40841a40"/>
        <function-ref name="setResistor" scoped="" ref="0x40841b20"/>
        <function-ref name="toggle" scoped="" ref="0x40841c00"/>
        <function-ref name="isOutput" scoped="" ref="0x40841ce0"/>
        <function-ref name="getResistor" scoped="" ref="0x40841dc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40841ea0"/>
        <function-ref name="get" scoped="" ref="0x40840010"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408400f0"/>
        <function-ref name="getRaw" scoped="" ref="0x408401d0"/>
        <function-ref name="set" scoped="" ref="0x408402b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40840390"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40840470"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408405d0"/>
        <function-ref name="clr" scoped="" ref="0x408406b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x4084b848" loc="95:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x4084b848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4084ba20"/>
        <function-ref name="isInput" scoped="" ref="0x4084bb00"/>
        <function-ref name="setResistor" scoped="" ref="0x4084bbe0"/>
        <function-ref name="toggle" scoped="" ref="0x4084bcc0"/>
        <function-ref name="isOutput" scoped="" ref="0x4084bda0"/>
        <function-ref name="getResistor" scoped="" ref="0x4084be80"/>
        <function-ref name="makeOutput" scoped="" ref="0x4084a010"/>
        <function-ref name="get" scoped="" ref="0x4084a0f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4084a1d0"/>
        <function-ref name="getRaw" scoped="" ref="0x4084a2b0"/>
        <function-ref name="set" scoped="" ref="0x4084a390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4084a470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4084a550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4084a6b0"/>
        <function-ref name="clr" scoped="" ref="0x4084a790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x40859688" loc="106:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x40859688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40859860"/>
        <function-ref name="isInput" scoped="" ref="0x40859940"/>
        <function-ref name="setResistor" scoped="" ref="0x40859a20"/>
        <function-ref name="toggle" scoped="" ref="0x40859b00"/>
        <function-ref name="isOutput" scoped="" ref="0x40859be0"/>
        <function-ref name="getResistor" scoped="" ref="0x40859cc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40859da0"/>
        <function-ref name="get" scoped="" ref="0x40859e80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40858010"/>
        <function-ref name="getRaw" scoped="" ref="0x408580f0"/>
        <function-ref name="set" scoped="" ref="0x408581d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408582b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40858390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408584f0"/>
        <function-ref name="clr" scoped="" ref="0x408585d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x4086e168" loc="163:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x4086e168"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086e340"/>
        <function-ref name="isInput" scoped="" ref="0x4086e420"/>
        <function-ref name="setResistor" scoped="" ref="0x4086e500"/>
        <function-ref name="toggle" scoped="" ref="0x4086e5e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4086e6c0"/>
        <function-ref name="getResistor" scoped="" ref="0x4086e7a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086e880"/>
        <function-ref name="get" scoped="" ref="0x4086e960"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4086ea40"/>
        <function-ref name="getRaw" scoped="" ref="0x4086eb20"/>
        <function-ref name="set" scoped="" ref="0x4086ec00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4086ece0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4086edc0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4086ef20"/>
        <function-ref name="clr" scoped="" ref="0x4086d018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x40861168" loc="152:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x40861168"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40861340"/>
        <function-ref name="isInput" scoped="" ref="0x40861420"/>
        <function-ref name="setResistor" scoped="" ref="0x40861500"/>
        <function-ref name="toggle" scoped="" ref="0x408615e0"/>
        <function-ref name="isOutput" scoped="" ref="0x408616c0"/>
        <function-ref name="getResistor" scoped="" ref="0x408617a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40861880"/>
        <function-ref name="get" scoped="" ref="0x40861960"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40861a40"/>
        <function-ref name="getRaw" scoped="" ref="0x40861b20"/>
        <function-ref name="set" scoped="" ref="0x40861c00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40861ce0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40861dc0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40861f20"/>
        <function-ref name="clr" scoped="" ref="0x40860018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x4082a4c8" loc="54:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x4082a4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4082a6a0"/>
        <function-ref name="isInput" scoped="" ref="0x4082a780"/>
        <function-ref name="setResistor" scoped="" ref="0x4082a860"/>
        <function-ref name="toggle" scoped="" ref="0x4082a940"/>
        <function-ref name="isOutput" scoped="" ref="0x4082aa20"/>
        <function-ref name="getResistor" scoped="" ref="0x4082ab00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4082abe0"/>
        <function-ref name="get" scoped="" ref="0x4082acc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4082ada0"/>
        <function-ref name="getRaw" scoped="" ref="0x4082ae80"/>
        <function-ref name="set" scoped="" ref="0x40829010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408290f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408291d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40829330"/>
        <function-ref name="clr" scoped="" ref="0x40829410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x40835688" loc="67:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x40835688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40835860"/>
        <function-ref name="isInput" scoped="" ref="0x40835940"/>
        <function-ref name="setResistor" scoped="" ref="0x40835a20"/>
        <function-ref name="toggle" scoped="" ref="0x40835b00"/>
        <function-ref name="isOutput" scoped="" ref="0x40835be0"/>
        <function-ref name="getResistor" scoped="" ref="0x40835cc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40835da0"/>
        <function-ref name="get" scoped="" ref="0x40835e80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40834010"/>
        <function-ref name="getRaw" scoped="" ref="0x408340f0"/>
        <function-ref name="set" scoped="" ref="0x408341d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408342b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40834390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408344f0"/>
        <function-ref name="clr" scoped="" ref="0x408345d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x4085b368" loc="104:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x4085b368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085b540"/>
        <function-ref name="isInput" scoped="" ref="0x4085b620"/>
        <function-ref name="setResistor" scoped="" ref="0x4085b700"/>
        <function-ref name="toggle" scoped="" ref="0x4085b7e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4085b8c0"/>
        <function-ref name="getResistor" scoped="" ref="0x4085b9a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085ba80"/>
        <function-ref name="get" scoped="" ref="0x4085bb60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4085bc40"/>
        <function-ref name="getRaw" scoped="" ref="0x4085bd20"/>
        <function-ref name="set" scoped="" ref="0x4085be00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4085bee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4085a010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4085a170"/>
        <function-ref name="clr" scoped="" ref="0x4085a250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x40833a08" loc="72:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x40833a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40833be0"/>
        <function-ref name="isInput" scoped="" ref="0x40833cc0"/>
        <function-ref name="setResistor" scoped="" ref="0x40833da0"/>
        <function-ref name="toggle" scoped="" ref="0x40833e80"/>
        <function-ref name="isOutput" scoped="" ref="0x40832010"/>
        <function-ref name="getResistor" scoped="" ref="0x408320f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408321d0"/>
        <function-ref name="get" scoped="" ref="0x408322b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40832390"/>
        <function-ref name="getRaw" scoped="" ref="0x40832470"/>
        <function-ref name="set" scoped="" ref="0x40832550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40832630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40832710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40832870"/>
        <function-ref name="clr" scoped="" ref="0x40832950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x4083eca8" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x4083eca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4083ee80"/>
        <function-ref name="isInput" scoped="" ref="0x4083d010"/>
        <function-ref name="setResistor" scoped="" ref="0x4083d0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4083d1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4083d2b0"/>
        <function-ref name="getResistor" scoped="" ref="0x4083d390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4083d470"/>
        <function-ref name="get" scoped="" ref="0x4083d550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4083d630"/>
        <function-ref name="getRaw" scoped="" ref="0x4083d710"/>
        <function-ref name="set" scoped="" ref="0x4083d7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4083d8d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4083d9b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4083db10"/>
        <function-ref name="clr" scoped="" ref="0x4083dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x40848d88" loc="98:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x40848d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40847010"/>
        <function-ref name="isInput" scoped="" ref="0x408470f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408471d0"/>
        <function-ref name="toggle" scoped="" ref="0x408472b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40847390"/>
        <function-ref name="getResistor" scoped="" ref="0x40847470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40847550"/>
        <function-ref name="get" scoped="" ref="0x40847630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40847710"/>
        <function-ref name="getRaw" scoped="" ref="0x408477f0"/>
        <function-ref name="set" scoped="" ref="0x408478d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408479b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40847a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40847bf0"/>
        <function-ref name="clr" scoped="" ref="0x40847cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x40856bc8" loc="109:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x40856bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40856da0"/>
        <function-ref name="isInput" scoped="" ref="0x40856e80"/>
        <function-ref name="setResistor" scoped="" ref="0x40855010"/>
        <function-ref name="toggle" scoped="" ref="0x408550f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408551d0"/>
        <function-ref name="getResistor" scoped="" ref="0x408552b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40855390"/>
        <function-ref name="get" scoped="" ref="0x40855470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40855550"/>
        <function-ref name="getRaw" scoped="" ref="0x40855630"/>
        <function-ref name="set" scoped="" ref="0x40855710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408557f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408558d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40855a30"/>
        <function-ref name="clr" scoped="" ref="0x40855b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x4085f3e0" loc="154:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x4085f3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085f5b8"/>
        <function-ref name="isInput" scoped="" ref="0x4085f698"/>
        <function-ref name="setResistor" scoped="" ref="0x4085f778"/>
        <function-ref name="toggle" scoped="" ref="0x4085f858"/>
        <function-ref name="isOutput" scoped="" ref="0x4085f938"/>
        <function-ref name="getResistor" scoped="" ref="0x4085fa18"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085faf8"/>
        <function-ref name="get" scoped="" ref="0x4085fbd8"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4085fcb8"/>
        <function-ref name="getRaw" scoped="" ref="0x4085fd98"/>
        <function-ref name="set" scoped="" ref="0x4085fe78"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4085e010"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4085e0f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4085e250"/>
        <function-ref name="clr" scoped="" ref="0x4085e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x4082ece8" loc="49:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x4082ece8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4082eec0"/>
        <function-ref name="isInput" scoped="" ref="0x4081e010"/>
        <function-ref name="setResistor" scoped="" ref="0x4081e0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4081e1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4081e2b0"/>
        <function-ref name="getResistor" scoped="" ref="0x4081e390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4081e470"/>
        <function-ref name="get" scoped="" ref="0x4081e550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4081e630"/>
        <function-ref name="getRaw" scoped="" ref="0x4081e710"/>
        <function-ref name="set" scoped="" ref="0x4081e7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4081e8d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4081e9b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4081eb10"/>
        <function-ref name="clr" scoped="" ref="0x4081ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x4083bd88" loc="62:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x4083bd88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4083a010"/>
        <function-ref name="isInput" scoped="" ref="0x4083a0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4083a1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4083a2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4083a390"/>
        <function-ref name="getResistor" scoped="" ref="0x4083a470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4083a550"/>
        <function-ref name="get" scoped="" ref="0x4083a630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4083a710"/>
        <function-ref name="getRaw" scoped="" ref="0x4083a7f0"/>
        <function-ref name="set" scoped="" ref="0x4083a8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4083a9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4083aa90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4083abf0"/>
        <function-ref name="clr" scoped="" ref="0x4083acd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x40845010" loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x40845010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408451e8"/>
        <function-ref name="isInput" scoped="" ref="0x408452c8"/>
        <function-ref name="setResistor" scoped="" ref="0x408453a8"/>
        <function-ref name="toggle" scoped="" ref="0x40845488"/>
        <function-ref name="isOutput" scoped="" ref="0x40845568"/>
        <function-ref name="getResistor" scoped="" ref="0x40845648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40845728"/>
        <function-ref name="get" scoped="" ref="0x40845808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408458e8"/>
        <function-ref name="getRaw" scoped="" ref="0x408459c8"/>
        <function-ref name="set" scoped="" ref="0x40845aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40845b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40845c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40845dc8"/>
        <function-ref name="clr" scoped="" ref="0x40845ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x40850178" loc="88:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x40850178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40850350"/>
        <function-ref name="isInput" scoped="" ref="0x40850430"/>
        <function-ref name="setResistor" scoped="" ref="0x40850510"/>
        <function-ref name="toggle" scoped="" ref="0x408505f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408506d0"/>
        <function-ref name="getResistor" scoped="" ref="0x408507b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40850890"/>
        <function-ref name="get" scoped="" ref="0x40850970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40850a50"/>
        <function-ref name="getRaw" scoped="" ref="0x40850b30"/>
        <function-ref name="set" scoped="" ref="0x40850c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40850cf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40850dd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4084f010"/>
        <function-ref name="clr" scoped="" ref="0x4084f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x40875760" loc="156:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x40875760"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40875938"/>
        <function-ref name="isInput" scoped="" ref="0x40875a18"/>
        <function-ref name="setResistor" scoped="" ref="0x40875af8"/>
        <function-ref name="toggle" scoped="" ref="0x40875bd8"/>
        <function-ref name="isOutput" scoped="" ref="0x40875cb8"/>
        <function-ref name="getResistor" scoped="" ref="0x40875d98"/>
        <function-ref name="makeOutput" scoped="" ref="0x40875e78"/>
        <function-ref name="get" scoped="" ref="0x40874010"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408740f0"/>
        <function-ref name="getRaw" scoped="" ref="0x408741d0"/>
        <function-ref name="set" scoped="" ref="0x408742b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40874390"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40874470"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408745d0"/>
        <function-ref name="clr" scoped="" ref="0x408746b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x40872c98" loc="160:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x40872c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40872e70"/>
        <function-ref name="isInput" scoped="" ref="0x40871010"/>
        <function-ref name="setResistor" scoped="" ref="0x408710f0"/>
        <function-ref name="toggle" scoped="" ref="0x408711d0"/>
        <function-ref name="isOutput" scoped="" ref="0x408712b0"/>
        <function-ref name="getResistor" scoped="" ref="0x40871390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40871470"/>
        <function-ref name="get" scoped="" ref="0x40871550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40871630"/>
        <function-ref name="getRaw" scoped="" ref="0x40871710"/>
        <function-ref name="set" scoped="" ref="0x408717f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408718d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408719b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40871b10"/>
        <function-ref name="clr" scoped="" ref="0x40871bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x4086b598" loc="166:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x4086b598"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086b770"/>
        <function-ref name="isInput" scoped="" ref="0x4086b850"/>
        <function-ref name="setResistor" scoped="" ref="0x4086b930"/>
        <function-ref name="toggle" scoped="" ref="0x4086ba10"/>
        <function-ref name="isOutput" scoped="" ref="0x4086baf0"/>
        <function-ref name="getResistor" scoped="" ref="0x4086bbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086bcb0"/>
        <function-ref name="get" scoped="" ref="0x4086bd90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4086be70"/>
        <function-ref name="getRaw" scoped="" ref="0x4086a010"/>
        <function-ref name="set" scoped="" ref="0x4086a0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4086a1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4086a2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4086a410"/>
        <function-ref name="clr" scoped="" ref="0x4086a4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x4084e4c8" loc="93:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x4084e4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4084e6a0"/>
        <function-ref name="isInput" scoped="" ref="0x4084e780"/>
        <function-ref name="setResistor" scoped="" ref="0x4084e860"/>
        <function-ref name="toggle" scoped="" ref="0x4084e940"/>
        <function-ref name="isOutput" scoped="" ref="0x4084ea20"/>
        <function-ref name="getResistor" scoped="" ref="0x4084eb00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4084ebe0"/>
        <function-ref name="get" scoped="" ref="0x4084ecc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4084eda0"/>
        <function-ref name="getRaw" scoped="" ref="0x4084ee80"/>
        <function-ref name="set" scoped="" ref="0x4084c010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4084c0f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4084c1d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4084c330"/>
        <function-ref name="clr" scoped="" ref="0x4084c410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x40874920" loc="157:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x40874920"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40874af8"/>
        <function-ref name="isInput" scoped="" ref="0x40874bd8"/>
        <function-ref name="setResistor" scoped="" ref="0x40874cb8"/>
        <function-ref name="toggle" scoped="" ref="0x40874d98"/>
        <function-ref name="isOutput" scoped="" ref="0x40874e78"/>
        <function-ref name="getResistor" scoped="" ref="0x40873010"/>
        <function-ref name="makeOutput" scoped="" ref="0x408730f0"/>
        <function-ref name="get" scoped="" ref="0x408731d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408732b0"/>
        <function-ref name="getRaw" scoped="" ref="0x40873390"/>
        <function-ref name="set" scoped="" ref="0x40873470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40873550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40873630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40873790"/>
        <function-ref name="clr" scoped="" ref="0x40873870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x4082c178" loc="52:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x4082c178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4082c350"/>
        <function-ref name="isInput" scoped="" ref="0x4082c430"/>
        <function-ref name="setResistor" scoped="" ref="0x4082c510"/>
        <function-ref name="toggle" scoped="" ref="0x4082c5f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4082c6d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4082c7b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4082c890"/>
        <function-ref name="get" scoped="" ref="0x4082c970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4082ca50"/>
        <function-ref name="getRaw" scoped="" ref="0x4082cb30"/>
        <function-ref name="set" scoped="" ref="0x4082cc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4082ccf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4082cdd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4082b010"/>
        <function-ref name="clr" scoped="" ref="0x4082b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x40837368" loc="65:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x40837368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40837540"/>
        <function-ref name="isInput" scoped="" ref="0x40837620"/>
        <function-ref name="setResistor" scoped="" ref="0x40837700"/>
        <function-ref name="toggle" scoped="" ref="0x408377e0"/>
        <function-ref name="isOutput" scoped="" ref="0x408378c0"/>
        <function-ref name="getResistor" scoped="" ref="0x408379a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40837a80"/>
        <function-ref name="get" scoped="" ref="0x40837b60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40837c40"/>
        <function-ref name="getRaw" scoped="" ref="0x40837d20"/>
        <function-ref name="set" scoped="" ref="0x40837e00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40837ee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40836010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40836170"/>
        <function-ref name="clr" scoped="" ref="0x40836250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x408424c8" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x408424c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408426a0"/>
        <function-ref name="isInput" scoped="" ref="0x40842780"/>
        <function-ref name="setResistor" scoped="" ref="0x40842860"/>
        <function-ref name="toggle" scoped="" ref="0x40842940"/>
        <function-ref name="isOutput" scoped="" ref="0x40842a20"/>
        <function-ref name="getResistor" scoped="" ref="0x40842b00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40842be0"/>
        <function-ref name="get" scoped="" ref="0x40842cc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40842da0"/>
        <function-ref name="getRaw" scoped="" ref="0x40842e80"/>
        <function-ref name="set" scoped="" ref="0x40841010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408410f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408411d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40841330"/>
        <function-ref name="clr" scoped="" ref="0x40841410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x40860288" loc="153:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x40860288"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40860460"/>
        <function-ref name="isInput" scoped="" ref="0x40860540"/>
        <function-ref name="setResistor" scoped="" ref="0x40860620"/>
        <function-ref name="toggle" scoped="" ref="0x40860700"/>
        <function-ref name="isOutput" scoped="" ref="0x408607e0"/>
        <function-ref name="getResistor" scoped="" ref="0x408608c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408609a0"/>
        <function-ref name="get" scoped="" ref="0x40860a80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40860b60"/>
        <function-ref name="getRaw" scoped="" ref="0x40860c40"/>
        <function-ref name="set" scoped="" ref="0x40860d20"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40860e00"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40860ee0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4085f090"/>
        <function-ref name="clr" scoped="" ref="0x4085f170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x4086d280" loc="164:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x4086d280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086d458"/>
        <function-ref name="isInput" scoped="" ref="0x4086d538"/>
        <function-ref name="setResistor" scoped="" ref="0x4086d618"/>
        <function-ref name="toggle" scoped="" ref="0x4086d6f8"/>
        <function-ref name="isOutput" scoped="" ref="0x4086d7d8"/>
        <function-ref name="getResistor" scoped="" ref="0x4086d8b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086d998"/>
        <function-ref name="get" scoped="" ref="0x4086da78"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4086db58"/>
        <function-ref name="getRaw" scoped="" ref="0x4086dc38"/>
        <function-ref name="set" scoped="" ref="0x4086dd18"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4086ddf8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4086ded8"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4086c090"/>
        <function-ref name="clr" scoped="" ref="0x4086c170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x40840928" loc="83:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x40840928"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40840b00"/>
        <function-ref name="isInput" scoped="" ref="0x40840be0"/>
        <function-ref name="setResistor" scoped="" ref="0x40840cc0"/>
        <function-ref name="toggle" scoped="" ref="0x40840da0"/>
        <function-ref name="isOutput" scoped="" ref="0x40840e80"/>
        <function-ref name="getResistor" scoped="" ref="0x4083f010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4083f0f0"/>
        <function-ref name="get" scoped="" ref="0x4083f1d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4083f2b0"/>
        <function-ref name="getRaw" scoped="" ref="0x4083f390"/>
        <function-ref name="set" scoped="" ref="0x4083f470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4083f550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4083f630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4083f790"/>
        <function-ref name="clr" scoped="" ref="0x4083f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x4084aa08" loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x4084aa08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4084abe0"/>
        <function-ref name="isInput" scoped="" ref="0x4084acc0"/>
        <function-ref name="setResistor" scoped="" ref="0x4084ada0"/>
        <function-ref name="toggle" scoped="" ref="0x4084ae80"/>
        <function-ref name="isOutput" scoped="" ref="0x40849010"/>
        <function-ref name="getResistor" scoped="" ref="0x408490f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408491d0"/>
        <function-ref name="get" scoped="" ref="0x408492b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40849390"/>
        <function-ref name="getRaw" scoped="" ref="0x40849470"/>
        <function-ref name="set" scoped="" ref="0x40849550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40849630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40849710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40849870"/>
        <function-ref name="clr" scoped="" ref="0x40849950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x40858848" loc="107:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x40858848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40858a20"/>
        <function-ref name="isInput" scoped="" ref="0x40858b00"/>
        <function-ref name="setResistor" scoped="" ref="0x40858be0"/>
        <function-ref name="toggle" scoped="" ref="0x40858cc0"/>
        <function-ref name="isOutput" scoped="" ref="0x40858da0"/>
        <function-ref name="getResistor" scoped="" ref="0x40858e80"/>
        <function-ref name="makeOutput" scoped="" ref="0x40857010"/>
        <function-ref name="get" scoped="" ref="0x408570f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408571d0"/>
        <function-ref name="getRaw" scoped="" ref="0x408572b0"/>
        <function-ref name="set" scoped="" ref="0x40857390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40857470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40857550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408576b0"/>
        <function-ref name="clr" scoped="" ref="0x40857790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x40829688" loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x40829688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40829860"/>
        <function-ref name="isInput" scoped="" ref="0x40829940"/>
        <function-ref name="setResistor" scoped="" ref="0x40829a20"/>
        <function-ref name="toggle" scoped="" ref="0x40829b00"/>
        <function-ref name="isOutput" scoped="" ref="0x40829be0"/>
        <function-ref name="getResistor" scoped="" ref="0x40829cc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40829da0"/>
        <function-ref name="get" scoped="" ref="0x40829e80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40828010"/>
        <function-ref name="getRaw" scoped="" ref="0x408280f0"/>
        <function-ref name="set" scoped="" ref="0x408281d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408282b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40828390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408284f0"/>
        <function-ref name="clr" scoped="" ref="0x408285d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x4085a4c8" loc="105:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x4085a4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085a6a0"/>
        <function-ref name="isInput" scoped="" ref="0x4085a780"/>
        <function-ref name="setResistor" scoped="" ref="0x4085a860"/>
        <function-ref name="toggle" scoped="" ref="0x4085a940"/>
        <function-ref name="isOutput" scoped="" ref="0x4085aa20"/>
        <function-ref name="getResistor" scoped="" ref="0x4085ab00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085abe0"/>
        <function-ref name="get" scoped="" ref="0x4085acc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4085ada0"/>
        <function-ref name="getRaw" scoped="" ref="0x4085ae80"/>
        <function-ref name="set" scoped="" ref="0x40859010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408590f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408591d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40859330"/>
        <function-ref name="clr" scoped="" ref="0x40859410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x40827a08" loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x40827a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40827be0"/>
        <function-ref name="isInput" scoped="" ref="0x40827cc0"/>
        <function-ref name="setResistor" scoped="" ref="0x40827da0"/>
        <function-ref name="toggle" scoped="" ref="0x40827e80"/>
        <function-ref name="isOutput" scoped="" ref="0x40826010"/>
        <function-ref name="getResistor" scoped="" ref="0x408260f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408261d0"/>
        <function-ref name="get" scoped="" ref="0x408262b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40826390"/>
        <function-ref name="getRaw" scoped="" ref="0x40826470"/>
        <function-ref name="set" scoped="" ref="0x40826550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40826630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40826710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40826870"/>
        <function-ref name="clr" scoped="" ref="0x40826950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x40832bc8" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x40832bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40832da0"/>
        <function-ref name="isInput" scoped="" ref="0x40832e80"/>
        <function-ref name="setResistor" scoped="" ref="0x40831010"/>
        <function-ref name="toggle" scoped="" ref="0x408310f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408311d0"/>
        <function-ref name="getResistor" scoped="" ref="0x408312b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40831390"/>
        <function-ref name="get" scoped="" ref="0x40831470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40831550"/>
        <function-ref name="getRaw" scoped="" ref="0x40831630"/>
        <function-ref name="set" scoped="" ref="0x40831710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408317f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408318d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40831a30"/>
        <function-ref name="clr" scoped="" ref="0x40831b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x4083de68" loc="86:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x4083de68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4083c050"/>
        <function-ref name="isInput" scoped="" ref="0x4083c130"/>
        <function-ref name="setResistor" scoped="" ref="0x4083c210"/>
        <function-ref name="toggle" scoped="" ref="0x4083c2f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4083c3d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4083c4b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4083c590"/>
        <function-ref name="get" scoped="" ref="0x4083c670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4083c750"/>
        <function-ref name="getRaw" scoped="" ref="0x4083c830"/>
        <function-ref name="set" scoped="" ref="0x4083c910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4083c9f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4083cad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4083cc30"/>
        <function-ref name="clr" scoped="" ref="0x4083cd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x4085d010" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x4085d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085d1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4085d2c8"/>
        <function-ref name="setResistor" scoped="" ref="0x4085d3a8"/>
        <function-ref name="toggle" scoped="" ref="0x4085d488"/>
        <function-ref name="isOutput" scoped="" ref="0x4085d568"/>
        <function-ref name="getResistor" scoped="" ref="0x4085d648"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085d728"/>
        <function-ref name="get" scoped="" ref="0x4085d808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4085d8e8"/>
        <function-ref name="getRaw" scoped="" ref="0x4085d9c8"/>
        <function-ref name="set" scoped="" ref="0x4085daa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4085db88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4085dc68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4085ddc8"/>
        <function-ref name="clr" scoped="" ref="0x4085dea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x40855d88" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x40855d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40854010"/>
        <function-ref name="isInput" scoped="" ref="0x408540f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408541d0"/>
        <function-ref name="toggle" scoped="" ref="0x408542b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40854390"/>
        <function-ref name="getResistor" scoped="" ref="0x40854470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40854550"/>
        <function-ref name="get" scoped="" ref="0x40854630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40854710"/>
        <function-ref name="getRaw" scoped="" ref="0x408547f0"/>
        <function-ref name="set" scoped="" ref="0x408548d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408549b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40854a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40854bf0"/>
        <function-ref name="clr" scoped="" ref="0x40854cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x4081ee68" loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x4081ee68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4081d050"/>
        <function-ref name="isInput" scoped="" ref="0x4081d130"/>
        <function-ref name="setResistor" scoped="" ref="0x4081d210"/>
        <function-ref name="toggle" scoped="" ref="0x4081d2f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4081d3d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4081d4b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4081d590"/>
        <function-ref name="get" scoped="" ref="0x4081d670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4081d750"/>
        <function-ref name="getRaw" scoped="" ref="0x4081d830"/>
        <function-ref name="set" scoped="" ref="0x4081d910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4081d9f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4081dad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4081dc30"/>
        <function-ref name="clr" scoped="" ref="0x4081dd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x40839010" loc="63:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x40839010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408391e8"/>
        <function-ref name="isInput" scoped="" ref="0x408392c8"/>
        <function-ref name="setResistor" scoped="" ref="0x408393a8"/>
        <function-ref name="toggle" scoped="" ref="0x40839488"/>
        <function-ref name="isOutput" scoped="" ref="0x40839568"/>
        <function-ref name="getResistor" scoped="" ref="0x40839648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40839728"/>
        <function-ref name="get" scoped="" ref="0x40839808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408398e8"/>
        <function-ref name="getRaw" scoped="" ref="0x408399c8"/>
        <function-ref name="set" scoped="" ref="0x40839aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40839b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40839c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40839dc8"/>
        <function-ref name="clr" scoped="" ref="0x40839ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x40844178" loc="76:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x40844178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40844350"/>
        <function-ref name="isInput" scoped="" ref="0x40844430"/>
        <function-ref name="setResistor" scoped="" ref="0x40844510"/>
        <function-ref name="toggle" scoped="" ref="0x408445f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408446d0"/>
        <function-ref name="getResistor" scoped="" ref="0x408447b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40844890"/>
        <function-ref name="get" scoped="" ref="0x40844970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40844a50"/>
        <function-ref name="getRaw" scoped="" ref="0x40844b30"/>
        <function-ref name="set" scoped="" ref="0x40844c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40844cf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40844dd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40843010"/>
        <function-ref name="clr" scoped="" ref="0x408430f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x4084f368" loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x4084f368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4084f540"/>
        <function-ref name="isInput" scoped="" ref="0x4084f620"/>
        <function-ref name="setResistor" scoped="" ref="0x4084f700"/>
        <function-ref name="toggle" scoped="" ref="0x4084f7e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4084f8c0"/>
        <function-ref name="getResistor" scoped="" ref="0x4084f9a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4084fa80"/>
        <function-ref name="get" scoped="" ref="0x4084fb60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4084fc40"/>
        <function-ref name="getRaw" scoped="" ref="0x4084fd20"/>
        <function-ref name="set" scoped="" ref="0x4084fe00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4084fee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4084e010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4084e170"/>
        <function-ref name="clr" scoped="" ref="0x4084e250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x40865ba8" loc="148:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x40865ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40865d80"/>
        <function-ref name="isInput" scoped="" ref="0x40865e60"/>
        <function-ref name="setResistor" scoped="" ref="0x40864010"/>
        <function-ref name="toggle" scoped="" ref="0x408640f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408641d0"/>
        <function-ref name="getResistor" scoped="" ref="0x408642b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40864390"/>
        <function-ref name="get" scoped="" ref="0x40864470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40864550"/>
        <function-ref name="getRaw" scoped="" ref="0x40864630"/>
        <function-ref name="set" scoped="" ref="0x40864710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408647f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408648d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40864a30"/>
        <function-ref name="clr" scoped="" ref="0x40864b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x40871e58" loc="161:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x40871e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40870050"/>
        <function-ref name="isInput" scoped="" ref="0x40870130"/>
        <function-ref name="setResistor" scoped="" ref="0x40870210"/>
        <function-ref name="toggle" scoped="" ref="0x408702f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408703d0"/>
        <function-ref name="getResistor" scoped="" ref="0x408704b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40870590"/>
        <function-ref name="get" scoped="" ref="0x40870670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40870750"/>
        <function-ref name="getRaw" scoped="" ref="0x40870830"/>
        <function-ref name="set" scoped="" ref="0x40870910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408709f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40870ad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40870c30"/>
        <function-ref name="clr" scoped="" ref="0x40870d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x40866a00" loc="147:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x40866a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40866bd8"/>
        <function-ref name="isInput" scoped="" ref="0x40866cb8"/>
        <function-ref name="setResistor" scoped="" ref="0x40866d98"/>
        <function-ref name="toggle" scoped="" ref="0x40866e78"/>
        <function-ref name="isOutput" scoped="" ref="0x40865010"/>
        <function-ref name="getResistor" scoped="" ref="0x408650f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408651d0"/>
        <function-ref name="get" scoped="" ref="0x408652b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40865390"/>
        <function-ref name="getRaw" scoped="" ref="0x40865470"/>
        <function-ref name="set" scoped="" ref="0x40865550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40865630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40865710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40865870"/>
        <function-ref name="clr" scoped="" ref="0x40865950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x4084c688" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x4084c688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4084c860"/>
        <function-ref name="isInput" scoped="" ref="0x4084c940"/>
        <function-ref name="setResistor" scoped="" ref="0x4084ca20"/>
        <function-ref name="toggle" scoped="" ref="0x4084cb00"/>
        <function-ref name="isOutput" scoped="" ref="0x4084cbe0"/>
        <function-ref name="getResistor" scoped="" ref="0x4084ccc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4084cda0"/>
        <function-ref name="get" scoped="" ref="0x4084ce80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4084b010"/>
        <function-ref name="getRaw" scoped="" ref="0x4084b0f0"/>
        <function-ref name="set" scoped="" ref="0x4084b1d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4084b2b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4084b390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4084b4f0"/>
        <function-ref name="clr" scoped="" ref="0x4084b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x4086a758" loc="168:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x4086a758"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086a930"/>
        <function-ref name="isInput" scoped="" ref="0x4086aa10"/>
        <function-ref name="setResistor" scoped="" ref="0x4086aaf0"/>
        <function-ref name="toggle" scoped="" ref="0x4086abd0"/>
        <function-ref name="isOutput" scoped="" ref="0x4086acb0"/>
        <function-ref name="getResistor" scoped="" ref="0x4086ad90"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086ae70"/>
        <function-ref name="get" scoped="" ref="0x40881010"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408810f0"/>
        <function-ref name="getRaw" scoped="" ref="0x408811d0"/>
        <function-ref name="set" scoped="" ref="0x408812b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40881390"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40881470"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408815d0"/>
        <function-ref name="clr" scoped="" ref="0x408816b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x4087eca8" loc="172:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x4087eca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4087ee80"/>
        <function-ref name="isInput" scoped="" ref="0x4087d010"/>
        <function-ref name="setResistor" scoped="" ref="0x4087d0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4087d1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4087d2b0"/>
        <function-ref name="getResistor" scoped="" ref="0x4087d390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4087d470"/>
        <function-ref name="get" scoped="" ref="0x4087d550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4087d630"/>
        <function-ref name="getRaw" scoped="" ref="0x4087d710"/>
        <function-ref name="set" scoped="" ref="0x4087d7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4087d8d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4087d9b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4087db10"/>
        <function-ref name="clr" scoped="" ref="0x4087dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x40852168" loc="143:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x40852168"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40852540"/>
        <function-ref name="isInput" scoped="" ref="0x40852620"/>
        <function-ref name="setResistor" scoped="" ref="0x40852700"/>
        <function-ref name="toggle" scoped="" ref="0x408527e0"/>
        <function-ref name="isOutput" scoped="" ref="0x408528c0"/>
        <function-ref name="getResistor" scoped="" ref="0x408529a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40852a80"/>
        <function-ref name="get" scoped="" ref="0x40852b60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40852c40"/>
        <function-ref name="getRaw" scoped="" ref="0x40852d20"/>
        <function-ref name="set" scoped="" ref="0x40852e00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40852ee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40869010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40869170"/>
        <function-ref name="clr" scoped="" ref="0x40869250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4087b5d8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4087b5d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4087b7b0"/>
        <function-ref name="isInput" scoped="" ref="0x4087b890"/>
        <function-ref name="setResistor" scoped="" ref="0x4087b970"/>
        <function-ref name="toggle" scoped="" ref="0x4087ba50"/>
        <function-ref name="isOutput" scoped="" ref="0x4087bb30"/>
        <function-ref name="getResistor" scoped="" ref="0x4087bc10"/>
        <function-ref name="makeOutput" scoped="" ref="0x4087bcf0"/>
        <function-ref name="get" scoped="" ref="0x4087bdd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4087beb0"/>
        <function-ref name="getRaw" scoped="" ref="0x4087a010"/>
        <function-ref name="set" scoped="" ref="0x4087a0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4087a1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4087a2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4087a410"/>
        <function-ref name="clr" scoped="" ref="0x4087a4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40894d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40894d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40893010"/>
        <function-ref name="isInput" scoped="" ref="0x408930f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408931d0"/>
        <function-ref name="toggle" scoped="" ref="0x408932b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40893390"/>
        <function-ref name="getResistor" scoped="" ref="0x40893470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40893550"/>
        <function-ref name="get" scoped="" ref="0x40893630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40893710"/>
        <function-ref name="getRaw" scoped="" ref="0x408937f0"/>
        <function-ref name="set" scoped="" ref="0x408938d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408939b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40893a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40893bf0"/>
        <function-ref name="clr" scoped="" ref="0x40893cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408915c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408915c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408917a0"/>
        <function-ref name="isInput" scoped="" ref="0x40891880"/>
        <function-ref name="setResistor" scoped="" ref="0x40891960"/>
        <function-ref name="toggle" scoped="" ref="0x40891a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40891b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40891c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40891ce0"/>
        <function-ref name="get" scoped="" ref="0x40891dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40891ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40890010"/>
        <function-ref name="set" scoped="" ref="0x408900f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408901d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408902b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40890410"/>
        <function-ref name="clr" scoped="" ref="0x408904f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4088fd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4088fd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4088e010"/>
        <function-ref name="isInput" scoped="" ref="0x4088e0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4088e1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4088e2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4088e390"/>
        <function-ref name="getResistor" scoped="" ref="0x4088e470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4088e550"/>
        <function-ref name="get" scoped="" ref="0x4088e630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4088e710"/>
        <function-ref name="getRaw" scoped="" ref="0x4088e7f0"/>
        <function-ref name="set" scoped="" ref="0x4088e8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4088e9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4088ea90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4088ebf0"/>
        <function-ref name="clr" scoped="" ref="0x4088ecd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408a45c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408a45c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a47a0"/>
        <function-ref name="isInput" scoped="" ref="0x408a4880"/>
        <function-ref name="setResistor" scoped="" ref="0x408a4960"/>
        <function-ref name="toggle" scoped="" ref="0x408a4a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408a4b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408a4c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a4ce0"/>
        <function-ref name="get" scoped="" ref="0x408a4dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408a4ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408a3010"/>
        <function-ref name="set" scoped="" ref="0x408a30f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408a31d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408a32b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408a3410"/>
        <function-ref name="clr" scoped="" ref="0x408a34f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408a2d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408a2d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a1010"/>
        <function-ref name="isInput" scoped="" ref="0x408a10f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408a11d0"/>
        <function-ref name="toggle" scoped="" ref="0x408a12b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408a1390"/>
        <function-ref name="getResistor" scoped="" ref="0x408a1470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a1550"/>
        <function-ref name="get" scoped="" ref="0x408a1630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408a1710"/>
        <function-ref name="getRaw" scoped="" ref="0x408a17f0"/>
        <function-ref name="set" scoped="" ref="0x408a18d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408a19b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408a1a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408a1bf0"/>
        <function-ref name="clr" scoped="" ref="0x408a1cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4089f5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4089f5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4089f7a0"/>
        <function-ref name="isInput" scoped="" ref="0x4089f880"/>
        <function-ref name="setResistor" scoped="" ref="0x4089f960"/>
        <function-ref name="toggle" scoped="" ref="0x4089fa40"/>
        <function-ref name="isOutput" scoped="" ref="0x4089fb20"/>
        <function-ref name="getResistor" scoped="" ref="0x4089fc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4089fce0"/>
        <function-ref name="get" scoped="" ref="0x4089fdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4089fea0"/>
        <function-ref name="getRaw" scoped="" ref="0x4089e010"/>
        <function-ref name="set" scoped="" ref="0x4089e0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4089e1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4089e2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4089e410"/>
        <function-ref name="clr" scoped="" ref="0x4089e4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4089dd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4089dd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4089b010"/>
        <function-ref name="isInput" scoped="" ref="0x4089b0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4089b1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4089b2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4089b390"/>
        <function-ref name="getResistor" scoped="" ref="0x4089b470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4089b550"/>
        <function-ref name="get" scoped="" ref="0x4089b630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4089b710"/>
        <function-ref name="getRaw" scoped="" ref="0x4089b7f0"/>
        <function-ref name="set" scoped="" ref="0x4089b8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4089b9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4089ba90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4089bbf0"/>
        <function-ref name="clr" scoped="" ref="0x4089bcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408b15c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408b15c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408b17a0"/>
        <function-ref name="isInput" scoped="" ref="0x408b1880"/>
        <function-ref name="setResistor" scoped="" ref="0x408b1960"/>
        <function-ref name="toggle" scoped="" ref="0x408b1a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408b1b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408b1c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408b1ce0"/>
        <function-ref name="get" scoped="" ref="0x408b1dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408b1ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408b0010"/>
        <function-ref name="set" scoped="" ref="0x408b00f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408b01d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408b02b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408b0410"/>
        <function-ref name="clr" scoped="" ref="0x408b04f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408afd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408afd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408ae010"/>
        <function-ref name="isInput" scoped="" ref="0x408ae0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408ae1d0"/>
        <function-ref name="toggle" scoped="" ref="0x408ae2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408ae390"/>
        <function-ref name="getResistor" scoped="" ref="0x408ae470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408ae550"/>
        <function-ref name="get" scoped="" ref="0x408ae630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408ae710"/>
        <function-ref name="getRaw" scoped="" ref="0x408ae7f0"/>
        <function-ref name="set" scoped="" ref="0x408ae8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408ae9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408aea90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408aebf0"/>
        <function-ref name="clr" scoped="" ref="0x408aecd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408ac5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408ac5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408ac7a0"/>
        <function-ref name="isInput" scoped="" ref="0x408ac880"/>
        <function-ref name="setResistor" scoped="" ref="0x408ac960"/>
        <function-ref name="toggle" scoped="" ref="0x408aca40"/>
        <function-ref name="isOutput" scoped="" ref="0x408acb20"/>
        <function-ref name="getResistor" scoped="" ref="0x408acc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408acce0"/>
        <function-ref name="get" scoped="" ref="0x408acdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408acea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408ab010"/>
        <function-ref name="set" scoped="" ref="0x408ab0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408ab1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408ab2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408ab410"/>
        <function-ref name="clr" scoped="" ref="0x408ab4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408aad68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408aad68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a9010"/>
        <function-ref name="isInput" scoped="" ref="0x408a90f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408a91d0"/>
        <function-ref name="toggle" scoped="" ref="0x408a92b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408a9390"/>
        <function-ref name="getResistor" scoped="" ref="0x408a9470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a9550"/>
        <function-ref name="get" scoped="" ref="0x408a9630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408a9710"/>
        <function-ref name="getRaw" scoped="" ref="0x408a97f0"/>
        <function-ref name="set" scoped="" ref="0x408a98d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408a99b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408a9a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408a9bf0"/>
        <function-ref name="clr" scoped="" ref="0x408a9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408a76f8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408a76f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a78d0"/>
        <function-ref name="isInput" scoped="" ref="0x408a79b0"/>
        <function-ref name="setResistor" scoped="" ref="0x408a7a90"/>
        <function-ref name="toggle" scoped="" ref="0x408a7b70"/>
        <function-ref name="isOutput" scoped="" ref="0x408a7c50"/>
        <function-ref name="getResistor" scoped="" ref="0x408a7d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a7e10"/>
        <function-ref name="get" scoped="" ref="0x408a7ef0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408a6010"/>
        <function-ref name="getRaw" scoped="" ref="0x408a60f0"/>
        <function-ref name="set" scoped="" ref="0x408a61d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408a62b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408a6390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408a64f0"/>
        <function-ref name="clr" scoped="" ref="0x408a65d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408bddf8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408bddf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408bc010"/>
        <function-ref name="isInput" scoped="" ref="0x408bc0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408bc1d0"/>
        <function-ref name="toggle" scoped="" ref="0x408bc2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408bc390"/>
        <function-ref name="getResistor" scoped="" ref="0x408bc470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408bc550"/>
        <function-ref name="get" scoped="" ref="0x408bc630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408bc710"/>
        <function-ref name="getRaw" scoped="" ref="0x408bc7f0"/>
        <function-ref name="set" scoped="" ref="0x408bc8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408bc9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408bca90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408bcbf0"/>
        <function-ref name="clr" scoped="" ref="0x408bccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408ba5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408ba5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408ba7a0"/>
        <function-ref name="isInput" scoped="" ref="0x408ba880"/>
        <function-ref name="setResistor" scoped="" ref="0x408ba960"/>
        <function-ref name="toggle" scoped="" ref="0x408baa40"/>
        <function-ref name="isOutput" scoped="" ref="0x408bab20"/>
        <function-ref name="getResistor" scoped="" ref="0x408bac00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408bace0"/>
        <function-ref name="get" scoped="" ref="0x408badc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408baea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408b9010"/>
        <function-ref name="set" scoped="" ref="0x408b90f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408b91d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408b92b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408b9410"/>
        <function-ref name="clr" scoped="" ref="0x408b94f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408b8d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408b8d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408b7010"/>
        <function-ref name="isInput" scoped="" ref="0x408b70f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408b71d0"/>
        <function-ref name="toggle" scoped="" ref="0x408b72b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408b7390"/>
        <function-ref name="getResistor" scoped="" ref="0x408b7470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408b7550"/>
        <function-ref name="get" scoped="" ref="0x408b7630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408b7710"/>
        <function-ref name="getRaw" scoped="" ref="0x408b77f0"/>
        <function-ref name="set" scoped="" ref="0x408b78d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408b79b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408b7a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408b7bf0"/>
        <function-ref name="clr" scoped="" ref="0x408b7cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408b55c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408b55c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408b57a0"/>
        <function-ref name="isInput" scoped="" ref="0x408b5880"/>
        <function-ref name="setResistor" scoped="" ref="0x408b5960"/>
        <function-ref name="toggle" scoped="" ref="0x408b5a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408b5b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408b5c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408b5ce0"/>
        <function-ref name="get" scoped="" ref="0x408b5dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408b5ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408b4010"/>
        <function-ref name="set" scoped="" ref="0x408b40f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408b41d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408b42b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408b4410"/>
        <function-ref name="clr" scoped="" ref="0x408b44f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408b3d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408b3d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408b2010"/>
        <function-ref name="isInput" scoped="" ref="0x408b20f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408b21d0"/>
        <function-ref name="toggle" scoped="" ref="0x408b22b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408b2390"/>
        <function-ref name="getResistor" scoped="" ref="0x408b2470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408b2550"/>
        <function-ref name="get" scoped="" ref="0x408b2630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408b2710"/>
        <function-ref name="getRaw" scoped="" ref="0x408b27f0"/>
        <function-ref name="set" scoped="" ref="0x408b28d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408b29b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408b2a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408b2bf0"/>
        <function-ref name="clr" scoped="" ref="0x408b2cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408c85c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408c85c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408c87a0"/>
        <function-ref name="isInput" scoped="" ref="0x408c8880"/>
        <function-ref name="setResistor" scoped="" ref="0x408c8960"/>
        <function-ref name="toggle" scoped="" ref="0x408c8a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408c8b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408c8c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408c8ce0"/>
        <function-ref name="get" scoped="" ref="0x408c8dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408c8ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408c7010"/>
        <function-ref name="set" scoped="" ref="0x408c70f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408c71d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408c72b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408c7410"/>
        <function-ref name="clr" scoped="" ref="0x408c74f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408c6d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408c6d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408c5010"/>
        <function-ref name="isInput" scoped="" ref="0x408c50f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408c51d0"/>
        <function-ref name="toggle" scoped="" ref="0x408c52b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408c5390"/>
        <function-ref name="getResistor" scoped="" ref="0x408c5470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408c5550"/>
        <function-ref name="get" scoped="" ref="0x408c5630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408c5710"/>
        <function-ref name="getRaw" scoped="" ref="0x408c57f0"/>
        <function-ref name="set" scoped="" ref="0x408c58d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408c59b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408c5a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408c5bf0"/>
        <function-ref name="clr" scoped="" ref="0x408c5cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408c35c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408c35c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408c37a0"/>
        <function-ref name="isInput" scoped="" ref="0x408c3880"/>
        <function-ref name="setResistor" scoped="" ref="0x408c3960"/>
        <function-ref name="toggle" scoped="" ref="0x408c3a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408c3b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408c3c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408c3ce0"/>
        <function-ref name="get" scoped="" ref="0x408c3dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408c3ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408c1010"/>
        <function-ref name="set" scoped="" ref="0x408c10f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408c11d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408c12b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408c1410"/>
        <function-ref name="clr" scoped="" ref="0x408c14f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408c0d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408c0d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408bf010"/>
        <function-ref name="isInput" scoped="" ref="0x408bf0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408bf1d0"/>
        <function-ref name="toggle" scoped="" ref="0x408bf2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408bf390"/>
        <function-ref name="getResistor" scoped="" ref="0x408bf470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408bf550"/>
        <function-ref name="get" scoped="" ref="0x408bf630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408bf710"/>
        <function-ref name="getRaw" scoped="" ref="0x408bf7f0"/>
        <function-ref name="set" scoped="" ref="0x408bf8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408bf9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408bfa90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408bfbf0"/>
        <function-ref name="clr" scoped="" ref="0x408bfcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408d55c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408d55c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408d57a0"/>
        <function-ref name="isInput" scoped="" ref="0x408d5880"/>
        <function-ref name="setResistor" scoped="" ref="0x408d5960"/>
        <function-ref name="toggle" scoped="" ref="0x408d5a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408d5b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408d5c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408d5ce0"/>
        <function-ref name="get" scoped="" ref="0x408d5dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408d5ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408d4010"/>
        <function-ref name="set" scoped="" ref="0x408d40f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408d41d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408d42b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408d4410"/>
        <function-ref name="clr" scoped="" ref="0x408d44f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408d3d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408d3d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408d2010"/>
        <function-ref name="isInput" scoped="" ref="0x408d20f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408d21d0"/>
        <function-ref name="toggle" scoped="" ref="0x408d22b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408d2390"/>
        <function-ref name="getResistor" scoped="" ref="0x408d2470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408d2550"/>
        <function-ref name="get" scoped="" ref="0x408d2630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408d2710"/>
        <function-ref name="getRaw" scoped="" ref="0x408d27f0"/>
        <function-ref name="set" scoped="" ref="0x408d28d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408d29b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408d2a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408d2bf0"/>
        <function-ref name="clr" scoped="" ref="0x408d2cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408d06f8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408d06f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408d08d0"/>
        <function-ref name="isInput" scoped="" ref="0x408d09b0"/>
        <function-ref name="setResistor" scoped="" ref="0x408d0a90"/>
        <function-ref name="toggle" scoped="" ref="0x408d0b70"/>
        <function-ref name="isOutput" scoped="" ref="0x408d0c50"/>
        <function-ref name="getResistor" scoped="" ref="0x408d0d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x408d0e10"/>
        <function-ref name="get" scoped="" ref="0x408d0ef0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408cf010"/>
        <function-ref name="getRaw" scoped="" ref="0x408cf0f0"/>
        <function-ref name="set" scoped="" ref="0x408cf1d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408cf2b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408cf390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408cf4f0"/>
        <function-ref name="clr" scoped="" ref="0x408cf5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408cedf8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408cedf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408cd010"/>
        <function-ref name="isInput" scoped="" ref="0x408cd0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408cd1d0"/>
        <function-ref name="toggle" scoped="" ref="0x408cd2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408cd390"/>
        <function-ref name="getResistor" scoped="" ref="0x408cd470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408cd550"/>
        <function-ref name="get" scoped="" ref="0x408cd630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408cd710"/>
        <function-ref name="getRaw" scoped="" ref="0x408cd7f0"/>
        <function-ref name="set" scoped="" ref="0x408cd8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408cd9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408cda90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408cdbf0"/>
        <function-ref name="clr" scoped="" ref="0x408cdcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408cb5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408cb5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408cb7a0"/>
        <function-ref name="isInput" scoped="" ref="0x408cb880"/>
        <function-ref name="setResistor" scoped="" ref="0x408cb960"/>
        <function-ref name="toggle" scoped="" ref="0x408cba40"/>
        <function-ref name="isOutput" scoped="" ref="0x408cbb20"/>
        <function-ref name="getResistor" scoped="" ref="0x408cbc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408cbce0"/>
        <function-ref name="get" scoped="" ref="0x408cbdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408cbea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408ca010"/>
        <function-ref name="set" scoped="" ref="0x408ca0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408ca1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408ca2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408ca410"/>
        <function-ref name="clr" scoped="" ref="0x408ca4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408e2d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408e2d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408e1010"/>
        <function-ref name="isInput" scoped="" ref="0x408e10f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408e11d0"/>
        <function-ref name="toggle" scoped="" ref="0x408e12b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408e1390"/>
        <function-ref name="getResistor" scoped="" ref="0x408e1470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408e1550"/>
        <function-ref name="get" scoped="" ref="0x408e1630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408e1710"/>
        <function-ref name="getRaw" scoped="" ref="0x408e17f0"/>
        <function-ref name="set" scoped="" ref="0x408e18d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408e19b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408e1a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408e1bf0"/>
        <function-ref name="clr" scoped="" ref="0x408e1cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408df5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408df5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408df7a0"/>
        <function-ref name="isInput" scoped="" ref="0x408df880"/>
        <function-ref name="setResistor" scoped="" ref="0x408df960"/>
        <function-ref name="toggle" scoped="" ref="0x408dfa40"/>
        <function-ref name="isOutput" scoped="" ref="0x408dfb20"/>
        <function-ref name="getResistor" scoped="" ref="0x408dfc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408dfce0"/>
        <function-ref name="get" scoped="" ref="0x408dfdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408dfea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408de010"/>
        <function-ref name="set" scoped="" ref="0x408de0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408de1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408de2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408de410"/>
        <function-ref name="clr" scoped="" ref="0x408de4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408ddd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408ddd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408dc010"/>
        <function-ref name="isInput" scoped="" ref="0x408dc0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408dc1d0"/>
        <function-ref name="toggle" scoped="" ref="0x408dc2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408dc390"/>
        <function-ref name="getResistor" scoped="" ref="0x408dc470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408dc550"/>
        <function-ref name="get" scoped="" ref="0x408dc630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408dc710"/>
        <function-ref name="getRaw" scoped="" ref="0x408dc7f0"/>
        <function-ref name="set" scoped="" ref="0x408dc8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408dc9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408dca90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408dcbf0"/>
        <function-ref name="clr" scoped="" ref="0x408dccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408da5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408da5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408da7a0"/>
        <function-ref name="isInput" scoped="" ref="0x408da880"/>
        <function-ref name="setResistor" scoped="" ref="0x408da960"/>
        <function-ref name="toggle" scoped="" ref="0x408daa40"/>
        <function-ref name="isOutput" scoped="" ref="0x408dab20"/>
        <function-ref name="getResistor" scoped="" ref="0x408dac00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408dace0"/>
        <function-ref name="get" scoped="" ref="0x408dadc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408daea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408d9010"/>
        <function-ref name="set" scoped="" ref="0x408d90f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408d91d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408d92b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408d9410"/>
        <function-ref name="clr" scoped="" ref="0x408d94f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408d8d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408d8d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408d7010"/>
        <function-ref name="isInput" scoped="" ref="0x408d70f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408d71d0"/>
        <function-ref name="toggle" scoped="" ref="0x408d72b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408d7390"/>
        <function-ref name="getResistor" scoped="" ref="0x408d7470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408d7550"/>
        <function-ref name="get" scoped="" ref="0x408d7630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408d7710"/>
        <function-ref name="getRaw" scoped="" ref="0x408d77f0"/>
        <function-ref name="set" scoped="" ref="0x408d78d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408d79b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408d7a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408d7bf0"/>
        <function-ref name="clr" scoped="" ref="0x408d7cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408ef5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408ef5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408ef7a0"/>
        <function-ref name="isInput" scoped="" ref="0x408ef880"/>
        <function-ref name="setResistor" scoped="" ref="0x408ef960"/>
        <function-ref name="toggle" scoped="" ref="0x408efa40"/>
        <function-ref name="isOutput" scoped="" ref="0x408efb20"/>
        <function-ref name="getResistor" scoped="" ref="0x408efc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408efce0"/>
        <function-ref name="get" scoped="" ref="0x408efdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408efea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408ee010"/>
        <function-ref name="set" scoped="" ref="0x408ee0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408ee1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408ee2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408ee410"/>
        <function-ref name="clr" scoped="" ref="0x408ee4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408edd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408edd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408eb010"/>
        <function-ref name="isInput" scoped="" ref="0x408eb0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408eb1d0"/>
        <function-ref name="toggle" scoped="" ref="0x408eb2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408eb390"/>
        <function-ref name="getResistor" scoped="" ref="0x408eb470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408eb550"/>
        <function-ref name="get" scoped="" ref="0x408eb630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408eb710"/>
        <function-ref name="getRaw" scoped="" ref="0x408eb7f0"/>
        <function-ref name="set" scoped="" ref="0x408eb8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408eb9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408eba90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408ebbf0"/>
        <function-ref name="clr" scoped="" ref="0x408ebcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408e95c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408e95c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408e97a0"/>
        <function-ref name="isInput" scoped="" ref="0x408e9880"/>
        <function-ref name="setResistor" scoped="" ref="0x408e9960"/>
        <function-ref name="toggle" scoped="" ref="0x408e9a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408e9b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408e9c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408e9ce0"/>
        <function-ref name="get" scoped="" ref="0x408e9dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408e9ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408e8010"/>
        <function-ref name="set" scoped="" ref="0x408e80f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408e81d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408e82b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408e8410"/>
        <function-ref name="clr" scoped="" ref="0x408e84f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408e7d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408e7d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408e6010"/>
        <function-ref name="isInput" scoped="" ref="0x408e60f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408e61d0"/>
        <function-ref name="toggle" scoped="" ref="0x408e62b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408e6390"/>
        <function-ref name="getResistor" scoped="" ref="0x408e6470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408e6550"/>
        <function-ref name="get" scoped="" ref="0x408e6630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408e6710"/>
        <function-ref name="getRaw" scoped="" ref="0x408e67f0"/>
        <function-ref name="set" scoped="" ref="0x408e68d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408e69b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408e6a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408e6bf0"/>
        <function-ref name="clr" scoped="" ref="0x408e6cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408e45c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408e45c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408e47a0"/>
        <function-ref name="isInput" scoped="" ref="0x408e4880"/>
        <function-ref name="setResistor" scoped="" ref="0x408e4960"/>
        <function-ref name="toggle" scoped="" ref="0x408e4a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408e4b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408e4c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408e4ce0"/>
        <function-ref name="get" scoped="" ref="0x408e4dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408e4ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408e3010"/>
        <function-ref name="set" scoped="" ref="0x408e30f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408e31d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408e32b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408e3410"/>
        <function-ref name="clr" scoped="" ref="0x408e34f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408fcd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408fcd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408fb010"/>
        <function-ref name="isInput" scoped="" ref="0x408fb0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408fb1d0"/>
        <function-ref name="toggle" scoped="" ref="0x408fb2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408fb390"/>
        <function-ref name="getResistor" scoped="" ref="0x408fb470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408fb550"/>
        <function-ref name="get" scoped="" ref="0x408fb630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408fb710"/>
        <function-ref name="getRaw" scoped="" ref="0x408fb7f0"/>
        <function-ref name="set" scoped="" ref="0x408fb8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408fb9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408fba90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408fbbf0"/>
        <function-ref name="clr" scoped="" ref="0x408fbcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408f95c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408f95c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408f97a0"/>
        <function-ref name="isInput" scoped="" ref="0x408f9880"/>
        <function-ref name="setResistor" scoped="" ref="0x408f9960"/>
        <function-ref name="toggle" scoped="" ref="0x408f9a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408f9b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408f9c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408f9ce0"/>
        <function-ref name="get" scoped="" ref="0x408f9dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408f9ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408f8010"/>
        <function-ref name="set" scoped="" ref="0x408f80f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408f81d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408f82b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408f8410"/>
        <function-ref name="clr" scoped="" ref="0x408f84f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408f7d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408f7d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408f6010"/>
        <function-ref name="isInput" scoped="" ref="0x408f60f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408f61d0"/>
        <function-ref name="toggle" scoped="" ref="0x408f62b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408f6390"/>
        <function-ref name="getResistor" scoped="" ref="0x408f6470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408f6550"/>
        <function-ref name="get" scoped="" ref="0x408f6630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408f6710"/>
        <function-ref name="getRaw" scoped="" ref="0x408f67f0"/>
        <function-ref name="set" scoped="" ref="0x408f68d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408f69b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408f6a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408f6bf0"/>
        <function-ref name="clr" scoped="" ref="0x408f6cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408f45c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408f45c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408f47a0"/>
        <function-ref name="isInput" scoped="" ref="0x408f4880"/>
        <function-ref name="setResistor" scoped="" ref="0x408f4960"/>
        <function-ref name="toggle" scoped="" ref="0x408f4a40"/>
        <function-ref name="isOutput" scoped="" ref="0x408f4b20"/>
        <function-ref name="getResistor" scoped="" ref="0x408f4c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408f4ce0"/>
        <function-ref name="get" scoped="" ref="0x408f4dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408f4ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408f3010"/>
        <function-ref name="set" scoped="" ref="0x408f30f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408f31d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408f32b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408f3410"/>
        <function-ref name="clr" scoped="" ref="0x408f34f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408f2d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408f2d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408f1010"/>
        <function-ref name="isInput" scoped="" ref="0x408f10f0"/>
        <function-ref name="setResistor" scoped="" ref="0x408f11d0"/>
        <function-ref name="toggle" scoped="" ref="0x408f12b0"/>
        <function-ref name="isOutput" scoped="" ref="0x408f1390"/>
        <function-ref name="getResistor" scoped="" ref="0x408f1470"/>
        <function-ref name="makeOutput" scoped="" ref="0x408f1550"/>
        <function-ref name="get" scoped="" ref="0x408f1630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408f1710"/>
        <function-ref name="getRaw" scoped="" ref="0x408f17f0"/>
        <function-ref name="set" scoped="" ref="0x408f18d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408f19b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408f1a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408f1bf0"/>
        <function-ref name="clr" scoped="" ref="0x408f1cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409095c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x409095c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409097a0"/>
        <function-ref name="isInput" scoped="" ref="0x40909880"/>
        <function-ref name="setResistor" scoped="" ref="0x40909960"/>
        <function-ref name="toggle" scoped="" ref="0x40909a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40909b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40909c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40909ce0"/>
        <function-ref name="get" scoped="" ref="0x40909dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40909ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40908010"/>
        <function-ref name="set" scoped="" ref="0x409080f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x409081d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x409082b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40908410"/>
        <function-ref name="clr" scoped="" ref="0x409084f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40907d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40907d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40906010"/>
        <function-ref name="isInput" scoped="" ref="0x409060f0"/>
        <function-ref name="setResistor" scoped="" ref="0x409061d0"/>
        <function-ref name="toggle" scoped="" ref="0x409062b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40906390"/>
        <function-ref name="getResistor" scoped="" ref="0x40906470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40906550"/>
        <function-ref name="get" scoped="" ref="0x40906630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40906710"/>
        <function-ref name="getRaw" scoped="" ref="0x409067f0"/>
        <function-ref name="set" scoped="" ref="0x409068d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x409069b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40906a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40906bf0"/>
        <function-ref name="clr" scoped="" ref="0x40906cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x409045c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x409045c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409047a0"/>
        <function-ref name="isInput" scoped="" ref="0x40904880"/>
        <function-ref name="setResistor" scoped="" ref="0x40904960"/>
        <function-ref name="toggle" scoped="" ref="0x40904a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40904b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40904c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40904ce0"/>
        <function-ref name="get" scoped="" ref="0x40904dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40904ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40903010"/>
        <function-ref name="set" scoped="" ref="0x409030f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x409031d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x409032b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40903410"/>
        <function-ref name="clr" scoped="" ref="0x409034f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40902d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40902d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40901010"/>
        <function-ref name="isInput" scoped="" ref="0x409010f0"/>
        <function-ref name="setResistor" scoped="" ref="0x409011d0"/>
        <function-ref name="toggle" scoped="" ref="0x409012b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40901390"/>
        <function-ref name="getResistor" scoped="" ref="0x40901470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40901550"/>
        <function-ref name="get" scoped="" ref="0x40901630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40901710"/>
        <function-ref name="getRaw" scoped="" ref="0x409017f0"/>
        <function-ref name="set" scoped="" ref="0x409018d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x409019b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40901a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40901bf0"/>
        <function-ref name="clr" scoped="" ref="0x40901cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408ff5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x408ff5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408ff7a0"/>
        <function-ref name="isInput" scoped="" ref="0x408ff880"/>
        <function-ref name="setResistor" scoped="" ref="0x408ff960"/>
        <function-ref name="toggle" scoped="" ref="0x408ffa40"/>
        <function-ref name="isOutput" scoped="" ref="0x408ffb20"/>
        <function-ref name="getResistor" scoped="" ref="0x408ffc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x408ffce0"/>
        <function-ref name="get" scoped="" ref="0x408ffdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x408ffea0"/>
        <function-ref name="getRaw" scoped="" ref="0x408fd010"/>
        <function-ref name="set" scoped="" ref="0x408fd0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x408fd1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x408fd2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x408fd410"/>
        <function-ref name="clr" scoped="" ref="0x408fd4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40916d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40916d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40915010"/>
        <function-ref name="isInput" scoped="" ref="0x409150f0"/>
        <function-ref name="setResistor" scoped="" ref="0x409151d0"/>
        <function-ref name="toggle" scoped="" ref="0x409152b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40915390"/>
        <function-ref name="getResistor" scoped="" ref="0x40915470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40915550"/>
        <function-ref name="get" scoped="" ref="0x40915630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40915710"/>
        <function-ref name="getRaw" scoped="" ref="0x409157f0"/>
        <function-ref name="set" scoped="" ref="0x409158d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x409159b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40915a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40915bf0"/>
        <function-ref name="clr" scoped="" ref="0x40915cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x40943b68" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x40943b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40943d40"/>
        <function-ref name="isInput" scoped="" ref="0x40943e20"/>
        <function-ref name="setResistor" scoped="" ref="0x40943f00"/>
        <function-ref name="toggle" scoped="" ref="0x40953010"/>
        <function-ref name="isOutput" scoped="" ref="0x409530f0"/>
        <function-ref name="getResistor" scoped="" ref="0x409531d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x409532b0"/>
        <function-ref name="get" scoped="" ref="0x40953390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40953470"/>
        <function-ref name="getRaw" scoped="" ref="0x40953550"/>
        <function-ref name="set" scoped="" ref="0x40953630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40953710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x409537f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40953950"/>
        <function-ref name="clr" scoped="" ref="0x40953a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x409431f0" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x409431f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x409433c8"/>
        <function-ref name="isInput" scoped="" ref="0x409434a8"/>
        <function-ref name="toggle" scoped="" ref="0x40943588"/>
        <function-ref name="isOutput" scoped="" ref="0x40943668"/>
        <function-ref name="get" scoped="" ref="0x40943748"/>
        <function-ref name="makeOutput" scoped="" ref="0x40943828"/>
        <function-ref name="set" scoped="" ref="0x40943908"/>
        <function-ref name="clr" scoped="" ref="0x409439e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x40951350" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x40951350"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40951528"/>
        <function-ref name="isInput" scoped="" ref="0x40951608"/>
        <function-ref name="setResistor" scoped="" ref="0x409516e8"/>
        <function-ref name="toggle" scoped="" ref="0x409517c8"/>
        <function-ref name="isOutput" scoped="" ref="0x409518a8"/>
        <function-ref name="getResistor" scoped="" ref="0x40951988"/>
        <function-ref name="makeOutput" scoped="" ref="0x40951a68"/>
        <function-ref name="get" scoped="" ref="0x40951b48"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40951c28"/>
        <function-ref name="getRaw" scoped="" ref="0x40951d08"/>
        <function-ref name="set" scoped="" ref="0x40951de8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40951ec8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40950010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40950170"/>
        <function-ref name="clr" scoped="" ref="0x40950250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x40952990" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x40952990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40952b68"/>
        <function-ref name="isInput" scoped="" ref="0x40952c48"/>
        <function-ref name="toggle" scoped="" ref="0x40952d28"/>
        <function-ref name="isOutput" scoped="" ref="0x40952e08"/>
        <function-ref name="get" scoped="" ref="0x40952ee8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40951010"/>
        <function-ref name="set" scoped="" ref="0x409510f0"/>
        <function-ref name="clr" scoped="" ref="0x409511d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x4094fb20" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x4094fb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4094fcf8"/>
        <function-ref name="isInput" scoped="" ref="0x4094fdd8"/>
        <function-ref name="setResistor" scoped="" ref="0x4094feb8"/>
        <function-ref name="toggle" scoped="" ref="0x4094e010"/>
        <function-ref name="isOutput" scoped="" ref="0x4094e0f0"/>
        <function-ref name="getResistor" scoped="" ref="0x4094e1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4094e2b0"/>
        <function-ref name="get" scoped="" ref="0x4094e390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4094e470"/>
        <function-ref name="getRaw" scoped="" ref="0x4094e550"/>
        <function-ref name="set" scoped="" ref="0x4094e630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4094e710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4094e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4094e950"/>
        <function-ref name="clr" scoped="" ref="0x4094ea30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x4094f1a8" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x4094f1a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4094f380"/>
        <function-ref name="isInput" scoped="" ref="0x4094f460"/>
        <function-ref name="toggle" scoped="" ref="0x4094f540"/>
        <function-ref name="isOutput" scoped="" ref="0x4094f620"/>
        <function-ref name="get" scoped="" ref="0x4094f700"/>
        <function-ref name="makeOutput" scoped="" ref="0x4094f7e0"/>
        <function-ref name="set" scoped="" ref="0x4094f8c0"/>
        <function-ref name="clr" scoped="" ref="0x4094f9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40949010" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="Led_Flash_App.Timer0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40949010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a48b00"/>
        <function-ref name="fired" scoped="" ref="0x40949d90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a484c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a48268"/>
        <function-ref name="getdt" scoped="" ref="0x40a47010"/>
        <function-ref name="gett0" scoped="" ref="0x40a48d58"/>
        <function-ref name="isRunning" scoped="" ref="0x40a48010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40949638"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a487e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x409498b8"/>
        <function-ref name="stop" scoped="" ref="0x40949b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x4095d190" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x4095d190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4095cc70"/>
        <function-ref name="fired" scoped="" ref="0x4095df10"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4095c630"/>
        <function-ref name="isOneShot" scoped="" ref="0x4095c3d8"/>
        <function-ref name="getdt" scoped="" ref="0x4095b150"/>
        <function-ref name="gett0" scoped="" ref="0x4095cec8"/>
        <function-ref name="isRunning" scoped="" ref="0x4095c180"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4095d7b8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4095c950"/>
        <function-ref name="startOneShot" scoped="" ref="0x4095da38"/>
        <function-ref name="stop" scoped="" ref="0x4095dcb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40957200" loc="46:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x40957200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40956d58"/>
        <function-ref name="fired" scoped="" ref="0x40956010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40956718"/>
        <function-ref name="isOneShot" scoped="" ref="0x409564c0"/>
        <function-ref name="getdt" scoped="" ref="0x40955268"/>
        <function-ref name="gett0" scoped="" ref="0x40955010"/>
        <function-ref name="isRunning" scoped="" ref="0x40956268"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40957828"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40956a38"/>
        <function-ref name="startOneShot" scoped="" ref="0x40957aa8"/>
        <function-ref name="stop" scoped="" ref="0x40957d28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x4096d310" loc="47:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x4096d310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4096d958"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4095ba08" loc="45:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4095ba08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4095bbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x4096f818" loc="44:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x4096f818"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409e8d58"/>
        <function-ref name="fired" scoped="" ref="0x409e8528"/>
        <function-ref name="startAt" scoped="" ref="0x409e8a18"/>
        <function-ref name="isRunning" scoped="" ref="0x409e87a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x409e6010"/>
        <function-ref name="start" scoped="" ref="0x409e8010"/>
        <function-ref name="stop" scoped="" ref="0x409e82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4096f3c0" loc="43:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4096f3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4096f598"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ccd180" loc="44:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x40ccd180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ccb640"/>
        <function-ref name="fired" scoped="" ref="0x40ccdde8"/>
        <function-ref name="startAt" scoped="" ref="0x40ccb300"/>
        <function-ref name="isRunning" scoped="" ref="0x40ccb088"/>
        <function-ref name="getAlarm" scoped="" ref="0x40ccb8b8"/>
        <function-ref name="start" scoped="" ref="0x40ccd8d0"/>
        <function-ref name="stop" scoped="" ref="0x40ccdb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40ccecf0" loc="43:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40ccecf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40cceec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x40ce9030" loc="41:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x40ce9030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40ce9208"/>
        <function-ref name="setEvent" scoped="" ref="0x40ce92e8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40ce93c8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40ce94a8"/>
        <function-ref name="fired" scoped="" ref="0x40ce9588"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x40cc2970" loc="39:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x40cc2970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40cc2b48"/>
        <function-ref name="setClockSource" scoped="" ref="0x40cc2c28"/>
        <function-ref name="enableEvents" scoped="" ref="0x40cc2d08"/>
        <function-ref name="get" scoped="" ref="0x40cc2de8"/>
        <function-ref name="disableEvents" scoped="" ref="0x40cc2ec8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40cea010"/>
        <function-ref name="getMode" scoped="" ref="0x40cea0f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40cea1d0"/>
        <function-ref name="overflow" scoped="" ref="0x40cea2b0"/>
        <function-ref name="setMode" scoped="" ref="0x40cea390"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40cea470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x40cea5d0" loc="40:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x40cea5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40cea7a8"/>
        <function-ref name="getControl" scoped="" ref="0x40cea888"/>
        <function-ref name="enableEvents" scoped="" ref="0x40cea968"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40ceaa48"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40ceab28"/>
        <function-ref name="disableEvents" scoped="" ref="0x40ceac08"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40ceace8"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40ceadc8"/>
        <function-ref name="setControl" scoped="" ref="0x40ceaea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x40974bd8" loc="52:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x40974bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40974db0"/>
        <function-ref name="setEvent" scoped="" ref="0x40974e90"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40973010"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x409730f0"/>
        <function-ref name="fired" scoped="" ref="0x409731d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x40978e18" loc="50:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x40978e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40975010"/>
        <function-ref name="setClockSource" scoped="" ref="0x409750f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x409751d0"/>
        <function-ref name="get" scoped="" ref="0x409752b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x40975390"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40975470"/>
        <function-ref name="getMode" scoped="" ref="0x40975550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40975630"/>
        <function-ref name="overflow" scoped="" ref="0x40975710"/>
        <function-ref name="setMode" scoped="" ref="0x409757f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x409758d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x40975dc8" loc="51:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x40975dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40974010"/>
        <function-ref name="getControl" scoped="" ref="0x409740f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x409741d0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x409742b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40974390"/>
        <function-ref name="disableEvents" scoped="" ref="0x40974470"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40974550"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40974630"/>
        <function-ref name="setControl" scoped="" ref="0x40974710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x40ce4a48" loc="49:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x40ce4a48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40ce4c20"/>
        <function-ref name="setEvent" scoped="" ref="0x40ce4d00"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40ce4de0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40ce4ec0"/>
        <function-ref name="fired" scoped="" ref="0x40ce3010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x40ce5340" loc="47:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x40ce5340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40ce5518"/>
        <function-ref name="setClockSource" scoped="" ref="0x40ce55f8"/>
        <function-ref name="enableEvents" scoped="" ref="0x40ce56d8"/>
        <function-ref name="get" scoped="" ref="0x40ce57b8"/>
        <function-ref name="disableEvents" scoped="" ref="0x40ce5898"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ce5978"/>
        <function-ref name="getMode" scoped="" ref="0x40ce5a58"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ce5b38"/>
        <function-ref name="overflow" scoped="" ref="0x40ce5c18"/>
        <function-ref name="setMode" scoped="" ref="0x40ce5cf8"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40ce5dd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ce79b8" loc="46:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x40ce79b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ce6e68"/>
        <function-ref name="fired" scoped="" ref="0x40ce6638"/>
        <function-ref name="startAt" scoped="" ref="0x40ce6b28"/>
        <function-ref name="isRunning" scoped="" ref="0x40ce68b0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40ce5110"/>
        <function-ref name="start" scoped="" ref="0x40ce6120"/>
        <function-ref name="stop" scoped="" ref="0x40ce63c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40ce7540" loc="45:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40ce7540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ce7718"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x40ce4010" loc="48:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x40ce4010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40ce41e8"/>
        <function-ref name="getControl" scoped="" ref="0x40ce42c8"/>
        <function-ref name="enableEvents" scoped="" ref="0x40ce43a8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40ce4488"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40ce4568"/>
        <function-ref name="disableEvents" scoped="" ref="0x40ce4648"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40ce4728"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40ce4808"/>
        <function-ref name="setControl" scoped="" ref="0x40ce48e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x409b6938" loc="43:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x409b6938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4099d0a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4099d598"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4099d320"/>
        <function-ref name="overflow" scoped="" ref="0x4099d810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x409b3440" loc="43:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x409b3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409b3b90"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409b20a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409b3e08"/>
        <function-ref name="overflow" scoped="" ref="0x409b2320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x409b0f08" loc="45:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x409b0f08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x409c40f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x409c41d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x409c42b0"/>
        <function-ref name="get" scoped="" ref="0x409c4390"/>
        <function-ref name="disableEvents" scoped="" ref="0x409c4470"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409c4550"/>
        <function-ref name="getMode" scoped="" ref="0x409c4630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409c4710"/>
        <function-ref name="overflow" scoped="" ref="0x409c47f0"/>
        <function-ref name="setMode" scoped="" ref="0x409c48d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x409c49b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x409a9e10" loc="44:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x409a9e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409b0570"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409b0a60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409b07e8"/>
        <function-ref name="overflow" scoped="" ref="0x409b0cd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x409c2bd0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x409c2bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409cd340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409cd830"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409cd5b8"/>
        <function-ref name="overflow" scoped="" ref="0x409cdaa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x409b4980" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x409b4980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409c20f8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409c25e8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409c2370"/>
        <function-ref name="overflow" scoped="" ref="0x409c2860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ccab88" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x40ccab88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40cc8068"/>
        <function-ref name="fired" scoped="" ref="0x40cc9820"/>
        <function-ref name="startAt" scoped="" ref="0x40cc9d10"/>
        <function-ref name="isRunning" scoped="" ref="0x40cc9a98"/>
        <function-ref name="getAlarm" scoped="" ref="0x40cc82e0"/>
        <function-ref name="start" scoped="" ref="0x40cc9308"/>
        <function-ref name="stop" scoped="" ref="0x40cc95a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x40cc7870" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x40cc7870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f18c8"/>
            <typename><typedef-ref name="T32khz" ref="0x406f1a90"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40cc5d58"/>
        <function-ref name="fired" scoped="" ref="0x40cc5528"/>
        <function-ref name="startAt" scoped="" ref="0x40cc5a18"/>
        <function-ref name="isRunning" scoped="" ref="0x40cc57a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40cc4010"/>
        <function-ref name="start" scoped="" ref="0x40cc5010"/>
        <function-ref name="stop" scoped="" ref="0x40cc52b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40cc8630" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x40cc8630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40cc8d80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40cc7288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40cc7010"/>
        <function-ref name="overflow" scoped="" ref="0x40cc7500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x40a08d08" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x40a08d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a08ee0"/>
        <function-ref name="runTask" scoped="" ref="0x40a07010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40a0a398" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x40a0a398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a08840"/>
        <function-ref name="fired" scoped="" ref="0x40a08010"/>
        <function-ref name="startAt" scoped="" ref="0x40a08500"/>
        <function-ref name="isRunning" scoped="" ref="0x40a08288"/>
        <function-ref name="getAlarm" scoped="" ref="0x40a08ab8"/>
        <function-ref name="start" scoped="" ref="0x40a0aae8"/>
        <function-ref name="stop" scoped="" ref="0x40a0ad88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409e40a0" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x409e40a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a0bb88"/>
        <function-ref name="fired" scoped="" ref="0x409e4e20"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a0b548"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a0b2f0"/>
        <function-ref name="getdt" scoped="" ref="0x40a0a048"/>
        <function-ref name="gett0" scoped="" ref="0x40a0bde0"/>
        <function-ref name="isRunning" scoped="" ref="0x40a0b098"/>
        <function-ref name="startPeriodic" scoped="" ref="0x409e46c8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a0b868"/>
        <function-ref name="startOneShot" scoped="" ref="0x409e4948"/>
        <function-ref name="stop" scoped="" ref="0x409e4bc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x40a35798" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x40a35798"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a35970"/>
        <function-ref name="runTask" scoped="" ref="0x40a35a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x40a385a0" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x40a385a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a35098"/>
        <function-ref name="fired" scoped="" ref="0x40a36330"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a36a38"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a367e0"/>
        <function-ref name="getdt" scoped="" ref="0x40a35548"/>
        <function-ref name="gett0" scoped="" ref="0x40a352f0"/>
        <function-ref name="isRunning" scoped="" ref="0x40a36588"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40a38bc8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a36d58"/>
        <function-ref name="startOneShot" scoped="" ref="0x40a38e48"/>
        <function-ref name="stop" scoped="" ref="0x40a360d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40a05210" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40a05210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a39da8"/>
        <function-ref name="fired" scoped="" ref="0x40a39010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a39748"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a394e0"/>
        <function-ref name="getdt" scoped="" ref="0x40a382b0"/>
        <function-ref name="gett0" scoped="" ref="0x40a38048"/>
        <function-ref name="isRunning" scoped="" ref="0x40a39278"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40a05848"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a39a78"/>
        <function-ref name="startOneShot" scoped="" ref="0x40a05ad8"/>
        <function-ref name="stop" scoped="" ref="0x40a05d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x40a2dbc8" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x40a2dbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a32238"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40a32588" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x40a32588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a32cd8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40a4a288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40a4a010"/>
        <function-ref name="overflow" scoped="" ref="0x40a4a500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40a47dc8" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="Led_Flash_App.Timer1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40a47dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x406f1288"/>
            <typename><typedef-ref name="TMilli" ref="0x406f1650"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a458e0"/>
        <function-ref name="fired" scoped="" ref="0x40a46b60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a452a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a45048"/>
        <function-ref name="getdt" scoped="" ref="0x40a45d90"/>
        <function-ref name="gett0" scoped="" ref="0x40a45b38"/>
        <function-ref name="isRunning" scoped="" ref="0x40a46db8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40a46408"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a455c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40a46688"/>
        <function-ref name="stop" scoped="" ref="0x40a46908"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x406f0398" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x406f0398"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x406ecc28" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x406ef9e8" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x406eebc0" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x406ee878" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x406eea60" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x406ee3d0" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x406eb5c0" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x406eb090" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x406efe78" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x406f09f0" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x406f0898" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x406ec608" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x406ec2c0" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x406ec4a8" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x406ef168" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x406ef010" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x406ef638" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x40702270" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x406f51a8" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x406f55f0" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x406f5a70" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x406f32f8" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x406f2010" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x406f24b8" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x406f5e98" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x406f2bf8" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x406f2aa0" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x406f6d48" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x406f3778" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x406f3ba0" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x406fd2c8" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x404601b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x40717700" loc="48:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x407196a0" loc="43:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x40717300" loc="47:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x407192e8" loc="42:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x40719ae8" loc="45:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x4071cb50" loc="40:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x4071cf08" loc="41:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x40719ee8" loc="46:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x406de010" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x404c28d8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x40743dc8" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x40743c70" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x40744518" loc="42:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40725f50"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x407244e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x40754320" loc="57:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x40754b60" loc="59:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x40743820" loc="47:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x40754718" loc="58:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x40744970" loc="43:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x40744db8" loc="44:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x407433f0" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40725f50"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x407244e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40743298" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40725f50"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x407244e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x40750a58" loc="44:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x4075d090" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x4074cf28" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x4075d7e0" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="81:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x4075d688" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x4074ca80" loc="68:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="65:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x4074c5e0" loc="63:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x4074c010" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x40750e68" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x40752610" loc="40:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x40752b68" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x40752a10" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x4074f168" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x4074f010" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x4074f708" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x4074f5b0" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x4074fab0" loc="45:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x40748a88" loc="52:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x40747868" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x40747710" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x40748e78" loc="53:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40749210" loc="45:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x40747298" loc="54:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x40749a58" loc="47:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x407486e0" loc="51:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x40749660" loc="46:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40749e20" loc="48:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x40748328" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x407481d0" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x40747e50" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x40747cf8" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401340c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x40771480" loc="39:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x406ca4e0" loc="85:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x406ca8d8" loc="86:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x406ca070" loc="79:../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x4063f168" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x40453e60" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x40459798" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x404592d0" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x4045f6d8" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x404601b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x4045fbf0" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x40808090" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x40808478" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x408098e8" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x40808c48" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40809ca8" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x40808850" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x408091a8" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x40809538" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x4081b138" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
          <long>&#10; Set pin direction to input.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x4081b560" loc="80:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x4082e4e8" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x404601b0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x4082e390" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x4081c3e8" loc="58:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x4081bd80" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x4082ea78" loc="117:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x4081b948" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
          <long>&#10; Set pin direction to output.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4081ccb0" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x40830a48" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x4081c808" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40133e68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40821b88" loc="48:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x408301c8" loc="92:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x40830e90" loc="101:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x40830648" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x4081c010" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40955a80" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40955a80"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x4096d010" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x40134300"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4096cc40" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4096cc40"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4096cda8" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40967070" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40969d28" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x40968a00" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x409686b0" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
          </variable>
          <variable name="dt" ref="0x409688a0" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x409681a8" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x40967500" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x409693e8" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40969290" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4096cda8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x409698c8" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4099b0c0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4099b0c0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4099b228" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4099b228"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x4099b710" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4099b228"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x409b6158" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x4099bc38" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404542e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x409b6558" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
